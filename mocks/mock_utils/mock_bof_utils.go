// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils (interfaces: BlockOnFileReconcileUtils)

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/netapp/trident/utils"
)

// MockBlockOnFileReconcileUtils is a mock of BlockOnFileReconcileUtils interface.
type MockBlockOnFileReconcileUtils struct {
	ctrl     *gomock.Controller
	recorder *MockBlockOnFileReconcileUtilsMockRecorder
}

// MockBlockOnFileReconcileUtilsMockRecorder is the mock recorder for MockBlockOnFileReconcileUtils.
type MockBlockOnFileReconcileUtilsMockRecorder struct {
	mock *MockBlockOnFileReconcileUtils
}

// NewMockBlockOnFileReconcileUtils creates a new mock instance.
func NewMockBlockOnFileReconcileUtils(ctrl *gomock.Controller) *MockBlockOnFileReconcileUtils {
	mock := &MockBlockOnFileReconcileUtils{ctrl: ctrl}
	mock.recorder = &MockBlockOnFileReconcileUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockOnFileReconcileUtils) EXPECT() *MockBlockOnFileReconcileUtilsMockRecorder {
	return m.recorder
}

// GetLoopDeviceAttachedToFile mocks base method.
func (m *MockBlockOnFileReconcileUtils) GetLoopDeviceAttachedToFile(arg0 context.Context, arg1 string) (bool, *utils.LoopDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoopDeviceAttachedToFile", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*utils.LoopDevice)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoopDeviceAttachedToFile indicates an expected call of GetLoopDeviceAttachedToFile.
func (mr *MockBlockOnFileReconcileUtilsMockRecorder) GetLoopDeviceAttachedToFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoopDeviceAttachedToFile", reflect.TypeOf((*MockBlockOnFileReconcileUtils)(nil).GetLoopDeviceAttachedToFile), arg0, arg1)
}

// ReconcileBlockOnFileVolumeInfo mocks base method.
func (m *MockBlockOnFileReconcileUtils) ReconcileBlockOnFileVolumeInfo(arg0 context.Context, arg1 *utils.VolumeTrackingInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileBlockOnFileVolumeInfo", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileBlockOnFileVolumeInfo indicates an expected call of ReconcileBlockOnFileVolumeInfo.
func (mr *MockBlockOnFileReconcileUtilsMockRecorder) ReconcileBlockOnFileVolumeInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileBlockOnFileVolumeInfo", reflect.TypeOf((*MockBlockOnFileReconcileUtils)(nil).ReconcileBlockOnFileVolumeInfo), arg0, arg1)
}
