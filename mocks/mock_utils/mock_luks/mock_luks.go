// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils (interfaces: LUKSDeviceInterface)

// Package mock_luks is a generated GoMock package.
package mock_luks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLUKSDeviceInterface is a mock of LUKSDeviceInterface interface.
type MockLUKSDeviceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLUKSDeviceInterfaceMockRecorder
}

// MockLUKSDeviceInterfaceMockRecorder is the mock recorder for MockLUKSDeviceInterface.
type MockLUKSDeviceInterfaceMockRecorder struct {
	mock *MockLUKSDeviceInterface
}

// NewMockLUKSDeviceInterface creates a new mock instance.
func NewMockLUKSDeviceInterface(ctrl *gomock.Controller) *MockLUKSDeviceInterface {
	mock := &MockLUKSDeviceInterface{ctrl: ctrl}
	mock.recorder = &MockLUKSDeviceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLUKSDeviceInterface) EXPECT() *MockLUKSDeviceInterfaceMockRecorder {
	return m.recorder
}

// CheckPassphrase mocks base method.
func (m *MockLUKSDeviceInterface) CheckPassphrase(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassphrase", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassphrase indicates an expected call of CheckPassphrase.
func (mr *MockLUKSDeviceInterfaceMockRecorder) CheckPassphrase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassphrase", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).CheckPassphrase), arg0, arg1)
}

// EnsureFormattedAndOpen mocks base method.
func (m *MockLUKSDeviceInterface) EnsureFormattedAndOpen(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFormattedAndOpen", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureFormattedAndOpen indicates an expected call of EnsureFormattedAndOpen.
func (mr *MockLUKSDeviceInterfaceMockRecorder) EnsureFormattedAndOpen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFormattedAndOpen", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).EnsureFormattedAndOpen), arg0, arg1)
}

// IsLUKSFormatted mocks base method.
func (m *MockLUKSDeviceInterface) IsLUKSFormatted(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLUKSFormatted", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLUKSFormatted indicates an expected call of IsLUKSFormatted.
func (mr *MockLUKSDeviceInterfaceMockRecorder) IsLUKSFormatted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLUKSFormatted", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).IsLUKSFormatted), arg0)
}

// IsOpen mocks base method.
func (m *MockLUKSDeviceInterface) IsOpen(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpen", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOpen indicates an expected call of IsOpen.
func (mr *MockLUKSDeviceInterfaceMockRecorder) IsOpen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpen", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).IsOpen), arg0)
}

// LUKSFormat mocks base method.
func (m *MockLUKSDeviceInterface) LUKSFormat(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LUKSFormat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LUKSFormat indicates an expected call of LUKSFormat.
func (mr *MockLUKSDeviceInterfaceMockRecorder) LUKSFormat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LUKSFormat", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).LUKSFormat), arg0, arg1)
}

// MappedDeviceName mocks base method.
func (m *MockLUKSDeviceInterface) MappedDeviceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MappedDeviceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MappedDeviceName indicates an expected call of MappedDeviceName.
func (mr *MockLUKSDeviceInterfaceMockRecorder) MappedDeviceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MappedDeviceName", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).MappedDeviceName))
}

// MappedDevicePath mocks base method.
func (m *MockLUKSDeviceInterface) MappedDevicePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MappedDevicePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// MappedDevicePath indicates an expected call of MappedDevicePath.
func (mr *MockLUKSDeviceInterfaceMockRecorder) MappedDevicePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MappedDevicePath", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).MappedDevicePath))
}

// Open mocks base method.
func (m *MockLUKSDeviceInterface) Open(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockLUKSDeviceInterfaceMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).Open), arg0, arg1)
}

// RawDevicePath mocks base method.
func (m *MockLUKSDeviceInterface) RawDevicePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawDevicePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// RawDevicePath indicates an expected call of RawDevicePath.
func (mr *MockLUKSDeviceInterfaceMockRecorder) RawDevicePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawDevicePath", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).RawDevicePath))
}

// Resize mocks base method.
func (m *MockLUKSDeviceInterface) Resize(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize.
func (mr *MockLUKSDeviceInterfaceMockRecorder) Resize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).Resize), arg0, arg1)
}

// RotatePassphrase mocks base method.
func (m *MockLUKSDeviceInterface) RotatePassphrase(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotatePassphrase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotatePassphrase indicates an expected call of RotatePassphrase.
func (mr *MockLUKSDeviceInterfaceMockRecorder) RotatePassphrase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotatePassphrase", reflect.TypeOf((*MockLUKSDeviceInterface)(nil).RotatePassphrase), arg0, arg1, arg2, arg3)
}
