// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/cli/k8s_client (interfaces: KubernetesClient)

// Package mock_k8s_client is a generated GoMock package.
package mock_k8s_client

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	k8sclient "github.com/netapp/trident/cli/k8s_client"
	versioned "github.com/netapp/trident/persistent_store/crd/client/clientset/versioned"
	utils "github.com/netapp/trident/utils"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/policy/v1beta1"
	v11 "k8s.io/api/rbac/v1"
	v12 "k8s.io/api/storage/v1"
	v13 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	types "k8s.io/apimachinery/pkg/types"
	version "k8s.io/apimachinery/pkg/version"
)

// MockKubernetesClient is a mock of KubernetesClient interface.
type MockKubernetesClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClientMockRecorder
}

// MockKubernetesClientMockRecorder is the mock recorder for MockKubernetesClient.
type MockKubernetesClientMockRecorder struct {
	mock *MockKubernetesClient
}

// NewMockKubernetesClient creates a new mock instance.
func NewMockKubernetesClient(ctrl *gomock.Controller) *MockKubernetesClient {
	mock := &MockKubernetesClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClient) EXPECT() *MockKubernetesClientMockRecorder {
	return m.recorder
}

// AddFinalizerToCRD mocks base method.
func (m *MockKubernetesClient) AddFinalizerToCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRD indicates an expected call of AddFinalizerToCRD.
func (mr *MockKubernetesClientMockRecorder) AddFinalizerToCRD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRD", reflect.TypeOf((*MockKubernetesClient)(nil).AddFinalizerToCRD), arg0)
}

// AddFinalizerToCRDs mocks base method.
func (m *MockKubernetesClient) AddFinalizerToCRDs(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRDs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRDs indicates an expected call of AddFinalizerToCRDs.
func (mr *MockKubernetesClientMockRecorder) AddFinalizerToCRDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRDs", reflect.TypeOf((*MockKubernetesClient)(nil).AddFinalizerToCRDs), arg0)
}

// CLI mocks base method.
func (m *MockKubernetesClient) CLI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CLI")
	ret0, _ := ret[0].(string)
	return ret0
}

// CLI indicates an expected call of CLI.
func (mr *MockKubernetesClientMockRecorder) CLI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CLI", reflect.TypeOf((*MockKubernetesClient)(nil).CLI))
}

// CheckCRDExists mocks base method.
func (m *MockKubernetesClient) CheckCRDExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCRDExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCRDExists indicates an expected call of CheckCRDExists.
func (mr *MockKubernetesClientMockRecorder) CheckCRDExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCRDExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckCRDExists), arg0)
}

// CheckCSIDriverExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckCSIDriverExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCSIDriverExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckCSIDriverExistsByLabel indicates an expected call of CheckCSIDriverExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckCSIDriverExistsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCSIDriverExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckCSIDriverExistsByLabel), arg0)
}

// CheckClusterRoleBindingExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckClusterRoleBindingExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleBindingExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleBindingExistsByLabel indicates an expected call of CheckClusterRoleBindingExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckClusterRoleBindingExistsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleBindingExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckClusterRoleBindingExistsByLabel), arg0)
}

// CheckClusterRoleExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckClusterRoleExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleExistsByLabel indicates an expected call of CheckClusterRoleExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckClusterRoleExistsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckClusterRoleExistsByLabel), arg0)
}

// CheckConfigMapExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckConfigMapExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConfigMapExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckConfigMapExistsByLabel indicates an expected call of CheckConfigMapExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckConfigMapExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConfigMapExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckConfigMapExistsByLabel), arg0, arg1)
}

// CheckDaemonSetExists mocks base method.
func (m *MockKubernetesClient) CheckDaemonSetExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDaemonSetExists indicates an expected call of CheckDaemonSetExists.
func (mr *MockKubernetesClientMockRecorder) CheckDaemonSetExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckDaemonSetExists), arg0, arg1)
}

// CheckDaemonSetExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckDaemonSetExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDaemonSetExistsByLabel indicates an expected call of CheckDaemonSetExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckDaemonSetExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckDaemonSetExistsByLabel), arg0, arg1)
}

// CheckDeploymentExists mocks base method.
func (m *MockKubernetesClient) CheckDeploymentExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDeploymentExists indicates an expected call of CheckDeploymentExists.
func (mr *MockKubernetesClientMockRecorder) CheckDeploymentExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckDeploymentExists), arg0, arg1)
}

// CheckDeploymentExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckDeploymentExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDeploymentExistsByLabel indicates an expected call of CheckDeploymentExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckDeploymentExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckDeploymentExistsByLabel), arg0, arg1)
}

// CheckNamespaceExists mocks base method.
func (m *MockKubernetesClient) CheckNamespaceExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamespaceExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNamespaceExists indicates an expected call of CheckNamespaceExists.
func (mr *MockKubernetesClientMockRecorder) CheckNamespaceExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamespaceExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckNamespaceExists), arg0)
}

// CheckPVCBound mocks base method.
func (m *MockKubernetesClient) CheckPVCBound(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPVCBound", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPVCBound indicates an expected call of CheckPVCBound.
func (mr *MockKubernetesClientMockRecorder) CheckPVCBound(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPVCBound", reflect.TypeOf((*MockKubernetesClient)(nil).CheckPVCBound), arg0)
}

// CheckPVCExists mocks base method.
func (m *MockKubernetesClient) CheckPVCExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPVCExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPVCExists indicates an expected call of CheckPVCExists.
func (mr *MockKubernetesClientMockRecorder) CheckPVCExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPVCExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckPVCExists), arg0)
}

// CheckPVExists mocks base method.
func (m *MockKubernetesClient) CheckPVExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPVExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPVExists indicates an expected call of CheckPVExists.
func (mr *MockKubernetesClientMockRecorder) CheckPVExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPVExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckPVExists), arg0)
}

// CheckPodExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckPodExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPodExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPodExistsByLabel indicates an expected call of CheckPodExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckPodExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPodExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckPodExistsByLabel), arg0, arg1)
}

// CheckPodSecurityPolicyExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckPodSecurityPolicyExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPodSecurityPolicyExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPodSecurityPolicyExistsByLabel indicates an expected call of CheckPodSecurityPolicyExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckPodSecurityPolicyExistsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPodSecurityPolicyExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckPodSecurityPolicyExistsByLabel), arg0)
}

// CheckSecretExists mocks base method.
func (m *MockKubernetesClient) CheckSecretExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSecretExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSecretExists indicates an expected call of CheckSecretExists.
func (mr *MockKubernetesClientMockRecorder) CheckSecretExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSecretExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckSecretExists), arg0)
}

// CheckServiceAccountExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckServiceAccountExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceAccountExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceAccountExistsByLabel indicates an expected call of CheckServiceAccountExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckServiceAccountExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceAccountExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckServiceAccountExistsByLabel), arg0, arg1)
}

// CheckServiceExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckServiceExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceExistsByLabel indicates an expected call of CheckServiceExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckServiceExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckServiceExistsByLabel), arg0, arg1)
}

// CheckStatefulSetExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckStatefulSetExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatefulSetExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckStatefulSetExistsByLabel indicates an expected call of CheckStatefulSetExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckStatefulSetExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatefulSetExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckStatefulSetExistsByLabel), arg0, arg1)
}

// CreateCHAPSecret mocks base method.
func (m *MockKubernetesClient) CreateCHAPSecret(arg0, arg1, arg2, arg3 string) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCHAPSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCHAPSecret indicates an expected call of CreateCHAPSecret.
func (mr *MockKubernetesClientMockRecorder) CreateCHAPSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCHAPSecret", reflect.TypeOf((*MockKubernetesClient)(nil).CreateCHAPSecret), arg0, arg1, arg2, arg3)
}

// CreateConfigMapFromDirectory mocks base method.
func (m *MockKubernetesClient) CreateConfigMapFromDirectory(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigMapFromDirectory", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfigMapFromDirectory indicates an expected call of CreateConfigMapFromDirectory.
func (mr *MockKubernetesClientMockRecorder) CreateConfigMapFromDirectory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigMapFromDirectory", reflect.TypeOf((*MockKubernetesClient)(nil).CreateConfigMapFromDirectory), arg0, arg1, arg2)
}

// CreateObjectByFile mocks base method.
func (m *MockKubernetesClient) CreateObjectByFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByFile indicates an expected call of CreateObjectByFile.
func (mr *MockKubernetesClientMockRecorder) CreateObjectByFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByFile", reflect.TypeOf((*MockKubernetesClient)(nil).CreateObjectByFile), arg0)
}

// CreateObjectByYAML mocks base method.
func (m *MockKubernetesClient) CreateObjectByYAML(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByYAML", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByYAML indicates an expected call of CreateObjectByYAML.
func (mr *MockKubernetesClientMockRecorder) CreateObjectByYAML(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByYAML", reflect.TypeOf((*MockKubernetesClient)(nil).CreateObjectByYAML), arg0)
}

// CreateSecret mocks base method.
func (m *MockKubernetesClient) CreateSecret(arg0 *v10.Secret) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockKubernetesClientMockRecorder) CreateSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockKubernetesClient)(nil).CreateSecret), arg0)
}

// DeleteCRD mocks base method.
func (m *MockKubernetesClient) DeleteCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCRD indicates an expected call of DeleteCRD.
func (mr *MockKubernetesClientMockRecorder) DeleteCRD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCRD", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteCRD), arg0)
}

// DeleteCSIDriver mocks base method.
func (m *MockKubernetesClient) DeleteCSIDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriver indicates an expected call of DeleteCSIDriver.
func (mr *MockKubernetesClientMockRecorder) DeleteCSIDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriver", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteCSIDriver), arg0)
}

// DeleteCSIDriverByLabel mocks base method.
func (m *MockKubernetesClient) DeleteCSIDriverByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriverByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriverByLabel indicates an expected call of DeleteCSIDriverByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteCSIDriverByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriverByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteCSIDriverByLabel), arg0)
}

// DeleteClusterRole mocks base method.
func (m *MockKubernetesClient) DeleteClusterRole(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole.
func (mr *MockKubernetesClientMockRecorder) DeleteClusterRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteClusterRole), arg0)
}

// DeleteClusterRoleBinding mocks base method.
func (m *MockKubernetesClient) DeleteClusterRoleBinding(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding.
func (mr *MockKubernetesClientMockRecorder) DeleteClusterRoleBinding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteClusterRoleBinding), arg0)
}

// DeleteClusterRoleBindingByLabel mocks base method.
func (m *MockKubernetesClient) DeleteClusterRoleBindingByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBindingByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBindingByLabel indicates an expected call of DeleteClusterRoleBindingByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteClusterRoleBindingByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBindingByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteClusterRoleBindingByLabel), arg0)
}

// DeleteClusterRoleByLabel mocks base method.
func (m *MockKubernetesClient) DeleteClusterRoleByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleByLabel indicates an expected call of DeleteClusterRoleByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteClusterRoleByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteClusterRoleByLabel), arg0)
}

// DeleteConfigMapByLabel mocks base method.
func (m *MockKubernetesClient) DeleteConfigMapByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigMapByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigMapByLabel indicates an expected call of DeleteConfigMapByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteConfigMapByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigMapByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteConfigMapByLabel), arg0)
}

// DeleteDaemonSet mocks base method.
func (m *MockKubernetesClient) DeleteDaemonSet(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSet indicates an expected call of DeleteDaemonSet.
func (mr *MockKubernetesClientMockRecorder) DeleteDaemonSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSet", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDaemonSet), arg0, arg1, arg2)
}

// DeleteDaemonSetByLabel mocks base method.
func (m *MockKubernetesClient) DeleteDaemonSetByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabel indicates an expected call of DeleteDaemonSetByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteDaemonSetByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDaemonSetByLabel), arg0)
}

// DeleteDaemonSetByLabelAndName mocks base method.
func (m *MockKubernetesClient) DeleteDaemonSetByLabelAndName(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabelAndName indicates an expected call of DeleteDaemonSetByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) DeleteDaemonSetByLabelAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDaemonSetByLabelAndName), arg0, arg1)
}

// DeleteDeployment mocks base method.
func (m *MockKubernetesClient) DeleteDeployment(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockKubernetesClientMockRecorder) DeleteDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDeployment), arg0, arg1, arg2)
}

// DeleteDeploymentByLabel mocks base method.
func (m *MockKubernetesClient) DeleteDeploymentByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentByLabel indicates an expected call of DeleteDeploymentByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteDeploymentByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDeploymentByLabel), arg0)
}

// DeleteObjectByFile mocks base method.
func (m *MockKubernetesClient) DeleteObjectByFile(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByFile indicates an expected call of DeleteObjectByFile.
func (mr *MockKubernetesClientMockRecorder) DeleteObjectByFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByFile", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteObjectByFile), arg0, arg1)
}

// DeleteObjectByYAML mocks base method.
func (m *MockKubernetesClient) DeleteObjectByYAML(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByYAML", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByYAML indicates an expected call of DeleteObjectByYAML.
func (mr *MockKubernetesClientMockRecorder) DeleteObjectByYAML(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByYAML", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteObjectByYAML), arg0, arg1)
}

// DeletePVByLabel mocks base method.
func (m *MockKubernetesClient) DeletePVByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePVByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePVByLabel indicates an expected call of DeletePVByLabel.
func (mr *MockKubernetesClientMockRecorder) DeletePVByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePVByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeletePVByLabel), arg0)
}

// DeletePVCByLabel mocks base method.
func (m *MockKubernetesClient) DeletePVCByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePVCByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePVCByLabel indicates an expected call of DeletePVCByLabel.
func (mr *MockKubernetesClientMockRecorder) DeletePVCByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePVCByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeletePVCByLabel), arg0)
}

// DeletePod mocks base method.
func (m *MockKubernetesClient) DeletePod(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockKubernetesClientMockRecorder) DeletePod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockKubernetesClient)(nil).DeletePod), arg0, arg1)
}

// DeletePodByLabel mocks base method.
func (m *MockKubernetesClient) DeletePodByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodByLabel indicates an expected call of DeletePodByLabel.
func (mr *MockKubernetesClientMockRecorder) DeletePodByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeletePodByLabel), arg0)
}

// DeletePodSecurityPolicy mocks base method.
func (m *MockKubernetesClient) DeletePodSecurityPolicy(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodSecurityPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodSecurityPolicy indicates an expected call of DeletePodSecurityPolicy.
func (mr *MockKubernetesClientMockRecorder) DeletePodSecurityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodSecurityPolicy", reflect.TypeOf((*MockKubernetesClient)(nil).DeletePodSecurityPolicy), arg0)
}

// DeletePodSecurityPolicyByLabel mocks base method.
func (m *MockKubernetesClient) DeletePodSecurityPolicyByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodSecurityPolicyByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodSecurityPolicyByLabel indicates an expected call of DeletePodSecurityPolicyByLabel.
func (mr *MockKubernetesClientMockRecorder) DeletePodSecurityPolicyByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodSecurityPolicyByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeletePodSecurityPolicyByLabel), arg0)
}

// DeleteResourceQuota mocks base method.
func (m *MockKubernetesClient) DeleteResourceQuota(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuota", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuota indicates an expected call of DeleteResourceQuota.
func (mr *MockKubernetesClientMockRecorder) DeleteResourceQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuota", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteResourceQuota), arg0)
}

// DeleteResourceQuotaByLabel mocks base method.
func (m *MockKubernetesClient) DeleteResourceQuotaByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuotaByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuotaByLabel indicates an expected call of DeleteResourceQuotaByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteResourceQuotaByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuotaByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteResourceQuotaByLabel), arg0)
}

// DeleteRole mocks base method.
func (m *MockKubernetesClient) DeleteRole(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockKubernetesClientMockRecorder) DeleteRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteRole), arg0)
}

// DeleteRoleBinding mocks base method.
func (m *MockKubernetesClient) DeleteRoleBinding(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockKubernetesClientMockRecorder) DeleteRoleBinding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteRoleBinding), arg0)
}

// DeleteSecret mocks base method.
func (m *MockKubernetesClient) DeleteSecret(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockKubernetesClientMockRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteSecret), arg0, arg1)
}

// DeleteSecretByLabel mocks base method.
func (m *MockKubernetesClient) DeleteSecretByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretByLabel indicates an expected call of DeleteSecretByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteSecretByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteSecretByLabel), arg0)
}

// DeleteSecretDefault mocks base method.
func (m *MockKubernetesClient) DeleteSecretDefault(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretDefault", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretDefault indicates an expected call of DeleteSecretDefault.
func (mr *MockKubernetesClientMockRecorder) DeleteSecretDefault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretDefault", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteSecretDefault), arg0)
}

// DeleteService mocks base method.
func (m *MockKubernetesClient) DeleteService(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockKubernetesClientMockRecorder) DeleteService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteService), arg0, arg1)
}

// DeleteServiceAccount mocks base method.
func (m *MockKubernetesClient) DeleteServiceAccount(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockKubernetesClientMockRecorder) DeleteServiceAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteServiceAccount), arg0, arg1, arg2)
}

// DeleteServiceAccountByLabel mocks base method.
func (m *MockKubernetesClient) DeleteServiceAccountByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccountByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccountByLabel indicates an expected call of DeleteServiceAccountByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteServiceAccountByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccountByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteServiceAccountByLabel), arg0)
}

// DeleteServiceByLabel mocks base method.
func (m *MockKubernetesClient) DeleteServiceByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceByLabel indicates an expected call of DeleteServiceByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteServiceByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteServiceByLabel), arg0)
}

// DeleteStatefulSet mocks base method.
func (m *MockKubernetesClient) DeleteStatefulSet(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatefulSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatefulSet indicates an expected call of DeleteStatefulSet.
func (mr *MockKubernetesClientMockRecorder) DeleteStatefulSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatefulSet", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteStatefulSet), arg0, arg1)
}

// DeleteStatefulSetByLabel mocks base method.
func (m *MockKubernetesClient) DeleteStatefulSetByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatefulSetByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatefulSetByLabel indicates an expected call of DeleteStatefulSetByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteStatefulSetByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatefulSetByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteStatefulSetByLabel), arg0)
}

// Exec mocks base method.
func (m *MockKubernetesClient) Exec(arg0, arg1 string, arg2 []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockKubernetesClientMockRecorder) Exec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockKubernetesClient)(nil).Exec), arg0, arg1, arg2)
}

// Flavor mocks base method.
func (m *MockKubernetesClient) Flavor() k8sclient.OrchestratorFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flavor")
	ret0, _ := ret[0].(k8sclient.OrchestratorFlavor)
	return ret0
}

// Flavor indicates an expected call of Flavor.
func (mr *MockKubernetesClientMockRecorder) Flavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flavor", reflect.TypeOf((*MockKubernetesClient)(nil).Flavor))
}

// FollowPodLogs mocks base method.
func (m *MockKubernetesClient) FollowPodLogs(arg0, arg1, arg2 string, arg3 k8sclient.LogLineCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FollowPodLogs", arg0, arg1, arg2, arg3)
}

// FollowPodLogs indicates an expected call of FollowPodLogs.
func (mr *MockKubernetesClientMockRecorder) FollowPodLogs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowPodLogs", reflect.TypeOf((*MockKubernetesClient)(nil).FollowPodLogs), arg0, arg1, arg2, arg3)
}

// GetCRD mocks base method.
func (m *MockKubernetesClient) GetCRD(arg0 string) (*v13.CustomResourceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRD", arg0)
	ret0, _ := ret[0].(*v13.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRD indicates an expected call of GetCRD.
func (mr *MockKubernetesClientMockRecorder) GetCRD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRD", reflect.TypeOf((*MockKubernetesClient)(nil).GetCRD), arg0)
}

// GetCRDClient mocks base method.
func (m *MockKubernetesClient) GetCRDClient() (*versioned.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRDClient")
	ret0, _ := ret[0].(*versioned.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRDClient indicates an expected call of GetCRDClient.
func (mr *MockKubernetesClientMockRecorder) GetCRDClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRDClient", reflect.TypeOf((*MockKubernetesClient)(nil).GetCRDClient))
}

// GetCSIDriverByLabel mocks base method.
func (m *MockKubernetesClient) GetCSIDriverByLabel(arg0 string) (*v12.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriverByLabel", arg0)
	ret0, _ := ret[0].(*v12.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriverByLabel indicates an expected call of GetCSIDriverByLabel.
func (mr *MockKubernetesClientMockRecorder) GetCSIDriverByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriverByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetCSIDriverByLabel), arg0)
}

// GetCSIDriversByLabel mocks base method.
func (m *MockKubernetesClient) GetCSIDriversByLabel(arg0 string) ([]v12.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriversByLabel", arg0)
	ret0, _ := ret[0].([]v12.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriversByLabel indicates an expected call of GetCSIDriversByLabel.
func (mr *MockKubernetesClientMockRecorder) GetCSIDriversByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriversByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetCSIDriversByLabel), arg0)
}

// GetClusterRoleBindingByLabel mocks base method.
func (m *MockKubernetesClient) GetClusterRoleBindingByLabel(arg0 string) (*v11.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabel", arg0)
	ret0, _ := ret[0].(*v11.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabel indicates an expected call of GetClusterRoleBindingByLabel.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleBindingByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleBindingByLabel), arg0)
}

// GetClusterRoleBindingByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetClusterRoleBindingByLabelAndName(arg0, arg1 string) (*v11.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v11.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabelAndName indicates an expected call of GetClusterRoleBindingByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleBindingByLabelAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleBindingByLabelAndName), arg0, arg1)
}

// GetClusterRoleBindingsByLabel mocks base method.
func (m *MockKubernetesClient) GetClusterRoleBindingsByLabel(arg0 string) ([]v11.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingsByLabel", arg0)
	ret0, _ := ret[0].([]v11.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingsByLabel indicates an expected call of GetClusterRoleBindingsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleBindingsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleBindingsByLabel), arg0)
}

// GetClusterRoleByLabel mocks base method.
func (m *MockKubernetesClient) GetClusterRoleByLabel(arg0 string) (*v11.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabel", arg0)
	ret0, _ := ret[0].(*v11.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabel indicates an expected call of GetClusterRoleByLabel.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleByLabel), arg0)
}

// GetClusterRoleByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetClusterRoleByLabelAndName(arg0, arg1 string) (*v11.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v11.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabelAndName indicates an expected call of GetClusterRoleByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleByLabelAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleByLabelAndName), arg0, arg1)
}

// GetClusterRolesByLabel mocks base method.
func (m *MockKubernetesClient) GetClusterRolesByLabel(arg0 string) ([]v11.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRolesByLabel", arg0)
	ret0, _ := ret[0].([]v11.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRolesByLabel indicates an expected call of GetClusterRolesByLabel.
func (mr *MockKubernetesClientMockRecorder) GetClusterRolesByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRolesByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRolesByLabel), arg0)
}

// GetConfigMapByLabel mocks base method.
func (m *MockKubernetesClient) GetConfigMapByLabel(arg0 string, arg1 bool) (*v10.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMapByLabel indicates an expected call of GetConfigMapByLabel.
func (mr *MockKubernetesClientMockRecorder) GetConfigMapByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetConfigMapByLabel), arg0, arg1)
}

// GetConfigMapsByLabel mocks base method.
func (m *MockKubernetesClient) GetConfigMapsByLabel(arg0 string, arg1 bool) ([]v10.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v10.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMapsByLabel indicates an expected call of GetConfigMapsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetConfigMapsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetConfigMapsByLabel), arg0, arg1)
}

// GetDaemonSetByLabel mocks base method.
func (m *MockKubernetesClient) GetDaemonSetByLabel(arg0 string, arg1 bool) (*v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabel indicates an expected call of GetDaemonSetByLabel.
func (mr *MockKubernetesClientMockRecorder) GetDaemonSetByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetDaemonSetByLabel), arg0, arg1)
}

// GetDaemonSetByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetDaemonSetByLabelAndName(arg0, arg1 string, arg2 bool) (*v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabelAndName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabelAndName indicates an expected call of GetDaemonSetByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetDaemonSetByLabelAndName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetDaemonSetByLabelAndName), arg0, arg1, arg2)
}

// GetDaemonSetsByLabel mocks base method.
func (m *MockKubernetesClient) GetDaemonSetsByLabel(arg0 string, arg1 bool) ([]v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetsByLabel indicates an expected call of GetDaemonSetsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetDaemonSetsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetDaemonSetsByLabel), arg0, arg1)
}

// GetDeploymentByLabel mocks base method.
func (m *MockKubernetesClient) GetDeploymentByLabel(arg0 string, arg1 bool) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentByLabel indicates an expected call of GetDeploymentByLabel.
func (mr *MockKubernetesClientMockRecorder) GetDeploymentByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetDeploymentByLabel), arg0, arg1)
}

// GetDeploymentsByLabel mocks base method.
func (m *MockKubernetesClient) GetDeploymentsByLabel(arg0 string, arg1 bool) ([]v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsByLabel indicates an expected call of GetDeploymentsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetDeploymentsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetDeploymentsByLabel), arg0, arg1)
}

// GetNamespace mocks base method.
func (m *MockKubernetesClient) GetNamespace(arg0 string) (*v10.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0)
	ret0, _ := ret[0].(*v10.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockKubernetesClientMockRecorder) GetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockKubernetesClient)(nil).GetNamespace), arg0)
}

// GetOpenShiftSCCByName mocks base method.
func (m *MockKubernetesClient) GetOpenShiftSCCByName(arg0, arg1 string) (bool, bool, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenShiftSCCByName", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOpenShiftSCCByName indicates an expected call of GetOpenShiftSCCByName.
func (mr *MockKubernetesClientMockRecorder) GetOpenShiftSCCByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenShiftSCCByName", reflect.TypeOf((*MockKubernetesClient)(nil).GetOpenShiftSCCByName), arg0, arg1)
}

// GetPV mocks base method.
func (m *MockKubernetesClient) GetPV(arg0 string) (*v10.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPV", arg0)
	ret0, _ := ret[0].(*v10.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPV indicates an expected call of GetPV.
func (mr *MockKubernetesClientMockRecorder) GetPV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPV", reflect.TypeOf((*MockKubernetesClient)(nil).GetPV), arg0)
}

// GetPVByLabel mocks base method.
func (m *MockKubernetesClient) GetPVByLabel(arg0 string) (*v10.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVByLabel", arg0)
	ret0, _ := ret[0].(*v10.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVByLabel indicates an expected call of GetPVByLabel.
func (mr *MockKubernetesClientMockRecorder) GetPVByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetPVByLabel), arg0)
}

// GetPVC mocks base method.
func (m *MockKubernetesClient) GetPVC(arg0 string) (*v10.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVC", arg0)
	ret0, _ := ret[0].(*v10.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVC indicates an expected call of GetPVC.
func (mr *MockKubernetesClientMockRecorder) GetPVC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVC", reflect.TypeOf((*MockKubernetesClient)(nil).GetPVC), arg0)
}

// GetPVCByLabel mocks base method.
func (m *MockKubernetesClient) GetPVCByLabel(arg0 string, arg1 bool) (*v10.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVCByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVCByLabel indicates an expected call of GetPVCByLabel.
func (mr *MockKubernetesClientMockRecorder) GetPVCByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVCByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetPVCByLabel), arg0, arg1)
}

// GetPodByLabel mocks base method.
func (m *MockKubernetesClient) GetPodByLabel(arg0 string, arg1 bool) (*v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodByLabel indicates an expected call of GetPodByLabel.
func (mr *MockKubernetesClientMockRecorder) GetPodByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetPodByLabel), arg0, arg1)
}

// GetPodSecurityPoliciesByLabel mocks base method.
func (m *MockKubernetesClient) GetPodSecurityPoliciesByLabel(arg0 string) ([]v1beta1.PodSecurityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodSecurityPoliciesByLabel", arg0)
	ret0, _ := ret[0].([]v1beta1.PodSecurityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodSecurityPoliciesByLabel indicates an expected call of GetPodSecurityPoliciesByLabel.
func (mr *MockKubernetesClientMockRecorder) GetPodSecurityPoliciesByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodSecurityPoliciesByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetPodSecurityPoliciesByLabel), arg0)
}

// GetPodSecurityPolicyByLabel mocks base method.
func (m *MockKubernetesClient) GetPodSecurityPolicyByLabel(arg0 string) (*v1beta1.PodSecurityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodSecurityPolicyByLabel", arg0)
	ret0, _ := ret[0].(*v1beta1.PodSecurityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodSecurityPolicyByLabel indicates an expected call of GetPodSecurityPolicyByLabel.
func (mr *MockKubernetesClientMockRecorder) GetPodSecurityPolicyByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodSecurityPolicyByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetPodSecurityPolicyByLabel), arg0)
}

// GetPodsByLabel mocks base method.
func (m *MockKubernetesClient) GetPodsByLabel(arg0 string, arg1 bool) ([]v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsByLabel indicates an expected call of GetPodsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetPodsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetPodsByLabel), arg0, arg1)
}

// GetResourceQuota mocks base method.
func (m *MockKubernetesClient) GetResourceQuota(arg0 string) (*v10.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuota", arg0)
	ret0, _ := ret[0].(*v10.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuota indicates an expected call of GetResourceQuota.
func (mr *MockKubernetesClientMockRecorder) GetResourceQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuota", reflect.TypeOf((*MockKubernetesClient)(nil).GetResourceQuota), arg0)
}

// GetResourceQuotaByLabel mocks base method.
func (m *MockKubernetesClient) GetResourceQuotaByLabel(arg0 string) (*v10.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotaByLabel", arg0)
	ret0, _ := ret[0].(*v10.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotaByLabel indicates an expected call of GetResourceQuotaByLabel.
func (mr *MockKubernetesClientMockRecorder) GetResourceQuotaByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotaByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetResourceQuotaByLabel), arg0)
}

// GetResourceQuotasByLabel mocks base method.
func (m *MockKubernetesClient) GetResourceQuotasByLabel(arg0 string) ([]v10.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotasByLabel", arg0)
	ret0, _ := ret[0].([]v10.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotasByLabel indicates an expected call of GetResourceQuotasByLabel.
func (mr *MockKubernetesClientMockRecorder) GetResourceQuotasByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotasByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetResourceQuotasByLabel), arg0)
}

// GetRoleBindingByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetRoleBindingByLabelAndName(arg0, arg1 string) (*v11.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v11.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingByLabelAndName indicates an expected call of GetRoleBindingByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetRoleBindingByLabelAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetRoleBindingByLabelAndName), arg0, arg1)
}

// GetRoleBindingsByLabel mocks base method.
func (m *MockKubernetesClient) GetRoleBindingsByLabel(arg0 string) ([]v11.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingsByLabel", arg0)
	ret0, _ := ret[0].([]v11.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingsByLabel indicates an expected call of GetRoleBindingsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetRoleBindingsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetRoleBindingsByLabel), arg0)
}

// GetRolesByLabel mocks base method.
func (m *MockKubernetesClient) GetRolesByLabel(arg0 string) ([]v11.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesByLabel", arg0)
	ret0, _ := ret[0].([]v11.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesByLabel indicates an expected call of GetRolesByLabel.
func (mr *MockKubernetesClientMockRecorder) GetRolesByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetRolesByLabel), arg0)
}

// GetSecret mocks base method.
func (m *MockKubernetesClient) GetSecret(arg0 string) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockKubernetesClientMockRecorder) GetSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockKubernetesClient)(nil).GetSecret), arg0)
}

// GetSecretByLabel mocks base method.
func (m *MockKubernetesClient) GetSecretByLabel(arg0 string, arg1 bool) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByLabel indicates an expected call of GetSecretByLabel.
func (mr *MockKubernetesClientMockRecorder) GetSecretByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetSecretByLabel), arg0, arg1)
}

// GetSecretsByLabel mocks base method.
func (m *MockKubernetesClient) GetSecretsByLabel(arg0 string, arg1 bool) ([]v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsByLabel indicates an expected call of GetSecretsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetSecretsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetSecretsByLabel), arg0, arg1)
}

// GetServiceAccountByLabel mocks base method.
func (m *MockKubernetesClient) GetServiceAccountByLabel(arg0 string, arg1 bool) (*v10.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabel indicates an expected call of GetServiceAccountByLabel.
func (mr *MockKubernetesClientMockRecorder) GetServiceAccountByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetServiceAccountByLabel), arg0, arg1)
}

// GetServiceAccountByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetServiceAccountByLabelAndName(arg0, arg1 string, arg2 bool) (*v10.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabelAndName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabelAndName indicates an expected call of GetServiceAccountByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetServiceAccountByLabelAndName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetServiceAccountByLabelAndName), arg0, arg1, arg2)
}

// GetServiceAccountsByLabel mocks base method.
func (m *MockKubernetesClient) GetServiceAccountsByLabel(arg0 string, arg1 bool) ([]v10.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v10.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountsByLabel indicates an expected call of GetServiceAccountsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetServiceAccountsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetServiceAccountsByLabel), arg0, arg1)
}

// GetServiceByLabel mocks base method.
func (m *MockKubernetesClient) GetServiceByLabel(arg0 string, arg1 bool) (*v10.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByLabel indicates an expected call of GetServiceByLabel.
func (mr *MockKubernetesClientMockRecorder) GetServiceByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetServiceByLabel), arg0, arg1)
}

// GetServicesByLabel mocks base method.
func (m *MockKubernetesClient) GetServicesByLabel(arg0 string, arg1 bool) ([]v10.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v10.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesByLabel indicates an expected call of GetServicesByLabel.
func (mr *MockKubernetesClientMockRecorder) GetServicesByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetServicesByLabel), arg0, arg1)
}

// GetSnapshotterCRDVersion mocks base method.
func (m *MockKubernetesClient) GetSnapshotterCRDVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotterCRDVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSnapshotterCRDVersion indicates an expected call of GetSnapshotterCRDVersion.
func (mr *MockKubernetesClientMockRecorder) GetSnapshotterCRDVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotterCRDVersion", reflect.TypeOf((*MockKubernetesClient)(nil).GetSnapshotterCRDVersion))
}

// GetStatefulSetByLabel mocks base method.
func (m *MockKubernetesClient) GetStatefulSetByLabel(arg0 string, arg1 bool) (*v1.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatefulSetByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v1.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatefulSetByLabel indicates an expected call of GetStatefulSetByLabel.
func (mr *MockKubernetesClientMockRecorder) GetStatefulSetByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatefulSetByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetStatefulSetByLabel), arg0, arg1)
}

// GetStatefulSetsByLabel mocks base method.
func (m *MockKubernetesClient) GetStatefulSetsByLabel(arg0 string, arg1 bool) ([]v1.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatefulSetsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v1.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatefulSetsByLabel indicates an expected call of GetStatefulSetsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetStatefulSetsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatefulSetsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetStatefulSetsByLabel), arg0, arg1)
}

// IsTopologyInUse mocks base method.
func (m *MockKubernetesClient) IsTopologyInUse() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTopologyInUse")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTopologyInUse indicates an expected call of IsTopologyInUse.
func (mr *MockKubernetesClientMockRecorder) IsTopologyInUse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTopologyInUse", reflect.TypeOf((*MockKubernetesClient)(nil).IsTopologyInUse))
}

// Namespace mocks base method.
func (m *MockKubernetesClient) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockKubernetesClientMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockKubernetesClient)(nil).Namespace))
}

// PatchCRD mocks base method.
func (m *MockKubernetesClient) PatchCRD(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCRD", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCRD indicates an expected call of PatchCRD.
func (mr *MockKubernetesClientMockRecorder) PatchCRD(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCRD", reflect.TypeOf((*MockKubernetesClient)(nil).PatchCRD), arg0, arg1, arg2)
}

// PatchCSIDriverByLabel mocks base method.
func (m *MockKubernetesClient) PatchCSIDriverByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCSIDriverByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSIDriverByLabel indicates an expected call of PatchCSIDriverByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchCSIDriverByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSIDriverByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchCSIDriverByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleBindingByLabel mocks base method.
func (m *MockKubernetesClient) PatchClusterRoleBindingByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabel indicates an expected call of PatchClusterRoleBindingByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRoleBindingByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRoleBindingByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleBindingByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchClusterRoleBindingByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabelAndName indicates an expected call of PatchClusterRoleBindingByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRoleBindingByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRoleBindingByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchClusterRoleByLabel mocks base method.
func (m *MockKubernetesClient) PatchClusterRoleByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabel indicates an expected call of PatchClusterRoleByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRoleByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRoleByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchClusterRoleByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabelAndName indicates an expected call of PatchClusterRoleByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRoleByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRoleByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchDaemonSetByLabel mocks base method.
func (m *MockKubernetesClient) PatchDaemonSetByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabel indicates an expected call of PatchDaemonSetByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchDaemonSetByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchDaemonSetByLabel), arg0, arg1, arg2)
}

// PatchDaemonSetByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchDaemonSetByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabelAndName indicates an expected call of PatchDaemonSetByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchDaemonSetByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchDaemonSetByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchDeploymentByLabel mocks base method.
func (m *MockKubernetesClient) PatchDeploymentByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeploymentByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDeploymentByLabel indicates an expected call of PatchDeploymentByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchDeploymentByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeploymentByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchDeploymentByLabel), arg0, arg1, arg2)
}

// PatchNamespace mocks base method.
func (m *MockKubernetesClient) PatchNamespace(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespace indicates an expected call of PatchNamespace.
func (mr *MockKubernetesClientMockRecorder) PatchNamespace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespace", reflect.TypeOf((*MockKubernetesClient)(nil).PatchNamespace), arg0, arg1, arg2)
}

// PatchNamespaceLabels mocks base method.
func (m *MockKubernetesClient) PatchNamespaceLabels(arg0 string, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespaceLabels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespaceLabels indicates an expected call of PatchNamespaceLabels.
func (mr *MockKubernetesClientMockRecorder) PatchNamespaceLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespaceLabels", reflect.TypeOf((*MockKubernetesClient)(nil).PatchNamespaceLabels), arg0, arg1)
}

// PatchOpenShiftSCC mocks base method.
func (m *MockKubernetesClient) PatchOpenShiftSCC(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchOpenShiftSCC", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchOpenShiftSCC indicates an expected call of PatchOpenShiftSCC.
func (mr *MockKubernetesClientMockRecorder) PatchOpenShiftSCC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOpenShiftSCC", reflect.TypeOf((*MockKubernetesClient)(nil).PatchOpenShiftSCC), arg0)
}

// PatchPodSecurityPolicyByLabel mocks base method.
func (m *MockKubernetesClient) PatchPodSecurityPolicyByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPodSecurityPolicyByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodSecurityPolicyByLabel indicates an expected call of PatchPodSecurityPolicyByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchPodSecurityPolicyByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodSecurityPolicyByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchPodSecurityPolicyByLabel), arg0, arg1, arg2)
}

// PatchPodSecurityPolicyByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchPodSecurityPolicyByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPodSecurityPolicyByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodSecurityPolicyByLabelAndName indicates an expected call of PatchPodSecurityPolicyByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchPodSecurityPolicyByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodSecurityPolicyByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchPodSecurityPolicyByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchResourceQuotaByLabel mocks base method.
func (m *MockKubernetesClient) PatchResourceQuotaByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResourceQuotaByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchResourceQuotaByLabel indicates an expected call of PatchResourceQuotaByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchResourceQuotaByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResourceQuotaByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchResourceQuotaByLabel), arg0, arg1, arg2)
}

// PatchRoleBindingByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchRoleBindingByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleBindingByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBindingByLabelAndName indicates an expected call of PatchRoleBindingByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchRoleBindingByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBindingByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchRoleBindingByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchRoleByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchRoleByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleByLabelAndName indicates an expected call of PatchRoleByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchRoleByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchRoleByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchSecretByLabel mocks base method.
func (m *MockKubernetesClient) PatchSecretByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSecretByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSecretByLabel indicates an expected call of PatchSecretByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchSecretByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecretByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchSecretByLabel), arg0, arg1, arg2)
}

// PatchServiceAccountByLabel mocks base method.
func (m *MockKubernetesClient) PatchServiceAccountByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabel indicates an expected call of PatchServiceAccountByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchServiceAccountByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchServiceAccountByLabel), arg0, arg1, arg2)
}

// PatchServiceAccountByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchServiceAccountByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabelAndName indicates an expected call of PatchServiceAccountByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchServiceAccountByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchServiceAccountByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchServiceByLabel mocks base method.
func (m *MockKubernetesClient) PatchServiceByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceByLabel indicates an expected call of PatchServiceByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchServiceByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchServiceByLabel), arg0, arg1, arg2)
}

// RemoveFinalizerFromCRD mocks base method.
func (m *MockKubernetesClient) RemoveFinalizerFromCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFinalizerFromCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFinalizerFromCRD indicates an expected call of RemoveFinalizerFromCRD.
func (mr *MockKubernetesClientMockRecorder) RemoveFinalizerFromCRD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizerFromCRD", reflect.TypeOf((*MockKubernetesClient)(nil).RemoveFinalizerFromCRD), arg0)
}

// RemoveTridentUserFromOpenShiftSCC mocks base method.
func (m *MockKubernetesClient) RemoveTridentUserFromOpenShiftSCC(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTridentUserFromOpenShiftSCC", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTridentUserFromOpenShiftSCC indicates an expected call of RemoveTridentUserFromOpenShiftSCC.
func (mr *MockKubernetesClientMockRecorder) RemoveTridentUserFromOpenShiftSCC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTridentUserFromOpenShiftSCC", reflect.TypeOf((*MockKubernetesClient)(nil).RemoveTridentUserFromOpenShiftSCC), arg0, arg1)
}

// ServerVersion mocks base method.
func (m *MockKubernetesClient) ServerVersion() *utils.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*utils.Version)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockKubernetesClientMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockKubernetesClient)(nil).ServerVersion))
}

// SetNamespace mocks base method.
func (m *MockKubernetesClient) SetNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", arg0)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockKubernetesClientMockRecorder) SetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockKubernetesClient)(nil).SetNamespace), arg0)
}

// SetTimeout mocks base method.
func (m *MockKubernetesClient) SetTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", arg0)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockKubernetesClientMockRecorder) SetTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockKubernetesClient)(nil).SetTimeout), arg0)
}

// UpdateSecret mocks base method.
func (m *MockKubernetesClient) UpdateSecret(arg0 *v10.Secret) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockKubernetesClientMockRecorder) UpdateSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockKubernetesClient)(nil).UpdateSecret), arg0)
}

// Version mocks base method.
func (m *MockKubernetesClient) Version() *version.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*version.Info)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockKubernetesClientMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKubernetesClient)(nil).Version))
}
