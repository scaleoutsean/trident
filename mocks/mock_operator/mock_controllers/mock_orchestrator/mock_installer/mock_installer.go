// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/operator/controllers/orchestrator/installer (interfaces: TridentInstaller,ExtendedK8sClient)

// Package mock_installer is a generated GoMock package.
package mock_installer

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	k8sclient "github.com/netapp/trident/cli/k8s_client"
	v1 "github.com/netapp/trident/operator/controllers/orchestrator/apis/netapp/v1"
	versioned "github.com/netapp/trident/persistent_store/crd/client/clientset/versioned"
	utils "github.com/netapp/trident/utils"
	v10 "k8s.io/api/apps/v1"
	v11 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/policy/v1beta1"
	v12 "k8s.io/api/rbac/v1"
	v13 "k8s.io/api/storage/v1"
	v14 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	types "k8s.io/apimachinery/pkg/types"
	version "k8s.io/apimachinery/pkg/version"
)

// MockTridentInstaller is a mock of TridentInstaller interface.
type MockTridentInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockTridentInstallerMockRecorder
}

// MockTridentInstallerMockRecorder is the mock recorder for MockTridentInstaller.
type MockTridentInstallerMockRecorder struct {
	mock *MockTridentInstaller
}

// NewMockTridentInstaller creates a new mock instance.
func NewMockTridentInstaller(ctrl *gomock.Controller) *MockTridentInstaller {
	mock := &MockTridentInstaller{ctrl: ctrl}
	mock.recorder = &MockTridentInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTridentInstaller) EXPECT() *MockTridentInstallerMockRecorder {
	return m.recorder
}

// CreateOrPatchCRD mocks base method.
func (m *MockTridentInstaller) CreateOrPatchCRD(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrPatchCRD", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrPatchCRD indicates an expected call of CreateOrPatchCRD.
func (mr *MockTridentInstallerMockRecorder) CreateOrPatchCRD(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrPatchCRD", reflect.TypeOf((*MockTridentInstaller)(nil).CreateOrPatchCRD), arg0, arg1, arg2)
}

// InstallOrPatchTrident mocks base method.
func (m *MockTridentInstaller) InstallOrPatchTrident(arg0 v1.TridentOrchestrator, arg1 string, arg2, arg3 bool) (*v1.TridentOrchestratorSpecValues, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallOrPatchTrident", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.TridentOrchestratorSpecValues)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InstallOrPatchTrident indicates an expected call of InstallOrPatchTrident.
func (mr *MockTridentInstallerMockRecorder) InstallOrPatchTrident(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallOrPatchTrident", reflect.TypeOf((*MockTridentInstaller)(nil).InstallOrPatchTrident), arg0, arg1, arg2, arg3)
}

// ObliviateCRDs mocks base method.
func (m *MockTridentInstaller) ObliviateCRDs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObliviateCRDs")
	ret0, _ := ret[0].(error)
	return ret0
}

// ObliviateCRDs indicates an expected call of ObliviateCRDs.
func (mr *MockTridentInstallerMockRecorder) ObliviateCRDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObliviateCRDs", reflect.TypeOf((*MockTridentInstaller)(nil).ObliviateCRDs))
}

// TridentDaemonSetInformation mocks base method.
func (m *MockTridentInstaller) TridentDaemonSetInformation() (*v10.DaemonSet, []v10.DaemonSet, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TridentDaemonSetInformation")
	ret0, _ := ret[0].(*v10.DaemonSet)
	ret1, _ := ret[1].([]v10.DaemonSet)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// TridentDaemonSetInformation indicates an expected call of TridentDaemonSetInformation.
func (mr *MockTridentInstallerMockRecorder) TridentDaemonSetInformation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TridentDaemonSetInformation", reflect.TypeOf((*MockTridentInstaller)(nil).TridentDaemonSetInformation))
}

// TridentDeploymentInformation mocks base method.
func (m *MockTridentInstaller) TridentDeploymentInformation(arg0 string) (*v10.Deployment, []v10.Deployment, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TridentDeploymentInformation", arg0)
	ret0, _ := ret[0].(*v10.Deployment)
	ret1, _ := ret[1].([]v10.Deployment)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// TridentDeploymentInformation indicates an expected call of TridentDeploymentInformation.
func (mr *MockTridentInstallerMockRecorder) TridentDeploymentInformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TridentDeploymentInformation", reflect.TypeOf((*MockTridentInstaller)(nil).TridentDeploymentInformation), arg0)
}

// UninstallCSIPreviewTrident mocks base method.
func (m *MockTridentInstaller) UninstallCSIPreviewTrident() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallCSIPreviewTrident")
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallCSIPreviewTrident indicates an expected call of UninstallCSIPreviewTrident.
func (mr *MockTridentInstallerMockRecorder) UninstallCSIPreviewTrident() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallCSIPreviewTrident", reflect.TypeOf((*MockTridentInstaller)(nil).UninstallCSIPreviewTrident))
}

// UninstallLegacyTrident mocks base method.
func (m *MockTridentInstaller) UninstallLegacyTrident() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallLegacyTrident")
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallLegacyTrident indicates an expected call of UninstallLegacyTrident.
func (mr *MockTridentInstallerMockRecorder) UninstallLegacyTrident() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallLegacyTrident", reflect.TypeOf((*MockTridentInstaller)(nil).UninstallLegacyTrident))
}

// UninstallTrident mocks base method.
func (m *MockTridentInstaller) UninstallTrident() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallTrident")
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallTrident indicates an expected call of UninstallTrident.
func (mr *MockTridentInstallerMockRecorder) UninstallTrident() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallTrident", reflect.TypeOf((*MockTridentInstaller)(nil).UninstallTrident))
}

// MockExtendedK8sClient is a mock of ExtendedK8sClient interface.
type MockExtendedK8sClient struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedK8sClientMockRecorder
}

// MockExtendedK8sClientMockRecorder is the mock recorder for MockExtendedK8sClient.
type MockExtendedK8sClientMockRecorder struct {
	mock *MockExtendedK8sClient
}

// NewMockExtendedK8sClient creates a new mock instance.
func NewMockExtendedK8sClient(ctrl *gomock.Controller) *MockExtendedK8sClient {
	mock := &MockExtendedK8sClient{ctrl: ctrl}
	mock.recorder = &MockExtendedK8sClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedK8sClient) EXPECT() *MockExtendedK8sClientMockRecorder {
	return m.recorder
}

// AddFinalizerToCRD mocks base method.
func (m *MockExtendedK8sClient) AddFinalizerToCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRD indicates an expected call of AddFinalizerToCRD.
func (mr *MockExtendedK8sClientMockRecorder) AddFinalizerToCRD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRD", reflect.TypeOf((*MockExtendedK8sClient)(nil).AddFinalizerToCRD), arg0)
}

// AddFinalizerToCRDs mocks base method.
func (m *MockExtendedK8sClient) AddFinalizerToCRDs(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRDs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRDs indicates an expected call of AddFinalizerToCRDs.
func (mr *MockExtendedK8sClientMockRecorder) AddFinalizerToCRDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRDs", reflect.TypeOf((*MockExtendedK8sClient)(nil).AddFinalizerToCRDs), arg0)
}

// CLI mocks base method.
func (m *MockExtendedK8sClient) CLI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CLI")
	ret0, _ := ret[0].(string)
	return ret0
}

// CLI indicates an expected call of CLI.
func (mr *MockExtendedK8sClientMockRecorder) CLI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CLI", reflect.TypeOf((*MockExtendedK8sClient)(nil).CLI))
}

// CheckCRDExists mocks base method.
func (m *MockExtendedK8sClient) CheckCRDExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCRDExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCRDExists indicates an expected call of CheckCRDExists.
func (mr *MockExtendedK8sClientMockRecorder) CheckCRDExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCRDExists", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckCRDExists), arg0)
}

// CheckCSIDriverExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckCSIDriverExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCSIDriverExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckCSIDriverExistsByLabel indicates an expected call of CheckCSIDriverExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckCSIDriverExistsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCSIDriverExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckCSIDriverExistsByLabel), arg0)
}

// CheckClusterRoleBindingExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckClusterRoleBindingExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleBindingExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleBindingExistsByLabel indicates an expected call of CheckClusterRoleBindingExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckClusterRoleBindingExistsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleBindingExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckClusterRoleBindingExistsByLabel), arg0)
}

// CheckClusterRoleExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckClusterRoleExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleExistsByLabel indicates an expected call of CheckClusterRoleExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckClusterRoleExistsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckClusterRoleExistsByLabel), arg0)
}

// CheckConfigMapExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckConfigMapExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConfigMapExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckConfigMapExistsByLabel indicates an expected call of CheckConfigMapExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckConfigMapExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConfigMapExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckConfigMapExistsByLabel), arg0, arg1)
}

// CheckDaemonSetExists mocks base method.
func (m *MockExtendedK8sClient) CheckDaemonSetExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDaemonSetExists indicates an expected call of CheckDaemonSetExists.
func (mr *MockExtendedK8sClientMockRecorder) CheckDaemonSetExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExists", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckDaemonSetExists), arg0, arg1)
}

// CheckDaemonSetExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckDaemonSetExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDaemonSetExistsByLabel indicates an expected call of CheckDaemonSetExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckDaemonSetExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckDaemonSetExistsByLabel), arg0, arg1)
}

// CheckDeploymentExists mocks base method.
func (m *MockExtendedK8sClient) CheckDeploymentExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDeploymentExists indicates an expected call of CheckDeploymentExists.
func (mr *MockExtendedK8sClientMockRecorder) CheckDeploymentExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExists", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckDeploymentExists), arg0, arg1)
}

// CheckDeploymentExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckDeploymentExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDeploymentExistsByLabel indicates an expected call of CheckDeploymentExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckDeploymentExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckDeploymentExistsByLabel), arg0, arg1)
}

// CheckNamespaceExists mocks base method.
func (m *MockExtendedK8sClient) CheckNamespaceExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamespaceExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNamespaceExists indicates an expected call of CheckNamespaceExists.
func (mr *MockExtendedK8sClientMockRecorder) CheckNamespaceExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamespaceExists", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckNamespaceExists), arg0)
}

// CheckPVCBound mocks base method.
func (m *MockExtendedK8sClient) CheckPVCBound(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPVCBound", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPVCBound indicates an expected call of CheckPVCBound.
func (mr *MockExtendedK8sClientMockRecorder) CheckPVCBound(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPVCBound", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckPVCBound), arg0)
}

// CheckPVCExists mocks base method.
func (m *MockExtendedK8sClient) CheckPVCExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPVCExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPVCExists indicates an expected call of CheckPVCExists.
func (mr *MockExtendedK8sClientMockRecorder) CheckPVCExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPVCExists", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckPVCExists), arg0)
}

// CheckPVExists mocks base method.
func (m *MockExtendedK8sClient) CheckPVExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPVExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPVExists indicates an expected call of CheckPVExists.
func (mr *MockExtendedK8sClientMockRecorder) CheckPVExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPVExists", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckPVExists), arg0)
}

// CheckPodExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckPodExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPodExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPodExistsByLabel indicates an expected call of CheckPodExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckPodExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPodExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckPodExistsByLabel), arg0, arg1)
}

// CheckPodSecurityPolicyExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckPodSecurityPolicyExistsByLabel(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPodSecurityPolicyExistsByLabel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPodSecurityPolicyExistsByLabel indicates an expected call of CheckPodSecurityPolicyExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckPodSecurityPolicyExistsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPodSecurityPolicyExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckPodSecurityPolicyExistsByLabel), arg0)
}

// CheckSecretExists mocks base method.
func (m *MockExtendedK8sClient) CheckSecretExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSecretExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSecretExists indicates an expected call of CheckSecretExists.
func (mr *MockExtendedK8sClientMockRecorder) CheckSecretExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSecretExists", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckSecretExists), arg0)
}

// CheckServiceAccountExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckServiceAccountExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceAccountExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceAccountExistsByLabel indicates an expected call of CheckServiceAccountExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckServiceAccountExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceAccountExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckServiceAccountExistsByLabel), arg0, arg1)
}

// CheckServiceExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckServiceExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceExistsByLabel indicates an expected call of CheckServiceExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckServiceExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckServiceExistsByLabel), arg0, arg1)
}

// CheckStatefulSetExistsByLabel mocks base method.
func (m *MockExtendedK8sClient) CheckStatefulSetExistsByLabel(arg0 string, arg1 bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatefulSetExistsByLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckStatefulSetExistsByLabel indicates an expected call of CheckStatefulSetExistsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) CheckStatefulSetExistsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatefulSetExistsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).CheckStatefulSetExistsByLabel), arg0, arg1)
}

// CreateCHAPSecret mocks base method.
func (m *MockExtendedK8sClient) CreateCHAPSecret(arg0, arg1, arg2, arg3 string) (*v11.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCHAPSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v11.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCHAPSecret indicates an expected call of CreateCHAPSecret.
func (mr *MockExtendedK8sClientMockRecorder) CreateCHAPSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCHAPSecret", reflect.TypeOf((*MockExtendedK8sClient)(nil).CreateCHAPSecret), arg0, arg1, arg2, arg3)
}

// CreateConfigMapFromDirectory mocks base method.
func (m *MockExtendedK8sClient) CreateConfigMapFromDirectory(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigMapFromDirectory", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfigMapFromDirectory indicates an expected call of CreateConfigMapFromDirectory.
func (mr *MockExtendedK8sClientMockRecorder) CreateConfigMapFromDirectory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigMapFromDirectory", reflect.TypeOf((*MockExtendedK8sClient)(nil).CreateConfigMapFromDirectory), arg0, arg1, arg2)
}

// CreateCustomResourceDefinition mocks base method.
func (m *MockExtendedK8sClient) CreateCustomResourceDefinition(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomResourceDefinition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResourceDefinition indicates an expected call of CreateCustomResourceDefinition.
func (mr *MockExtendedK8sClientMockRecorder) CreateCustomResourceDefinition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceDefinition", reflect.TypeOf((*MockExtendedK8sClient)(nil).CreateCustomResourceDefinition), arg0, arg1)
}

// CreateObjectByFile mocks base method.
func (m *MockExtendedK8sClient) CreateObjectByFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByFile indicates an expected call of CreateObjectByFile.
func (mr *MockExtendedK8sClientMockRecorder) CreateObjectByFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByFile", reflect.TypeOf((*MockExtendedK8sClient)(nil).CreateObjectByFile), arg0)
}

// CreateObjectByYAML mocks base method.
func (m *MockExtendedK8sClient) CreateObjectByYAML(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByYAML", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByYAML indicates an expected call of CreateObjectByYAML.
func (mr *MockExtendedK8sClientMockRecorder) CreateObjectByYAML(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByYAML", reflect.TypeOf((*MockExtendedK8sClient)(nil).CreateObjectByYAML), arg0)
}

// CreateSecret mocks base method.
func (m *MockExtendedK8sClient) CreateSecret(arg0 *v11.Secret) (*v11.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0)
	ret0, _ := ret[0].(*v11.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockExtendedK8sClientMockRecorder) CreateSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockExtendedK8sClient)(nil).CreateSecret), arg0)
}

// DeleteCRD mocks base method.
func (m *MockExtendedK8sClient) DeleteCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCRD indicates an expected call of DeleteCRD.
func (mr *MockExtendedK8sClientMockRecorder) DeleteCRD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCRD", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteCRD), arg0)
}

// DeleteCSIDriver mocks base method.
func (m *MockExtendedK8sClient) DeleteCSIDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriver indicates an expected call of DeleteCSIDriver.
func (mr *MockExtendedK8sClientMockRecorder) DeleteCSIDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriver", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteCSIDriver), arg0)
}

// DeleteCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteCSIDriverByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriverByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriverByLabel indicates an expected call of DeleteCSIDriverByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteCSIDriverByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteCSIDriverByLabel), arg0)
}

// DeleteCSIDriverCR mocks base method.
func (m *MockExtendedK8sClient) DeleteCSIDriverCR(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriverCR", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriverCR indicates an expected call of DeleteCSIDriverCR.
func (mr *MockExtendedK8sClientMockRecorder) DeleteCSIDriverCR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriverCR", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteCSIDriverCR), arg0, arg1)
}

// DeleteClusterRole mocks base method.
func (m *MockExtendedK8sClient) DeleteClusterRole(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole.
func (mr *MockExtendedK8sClientMockRecorder) DeleteClusterRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteClusterRole), arg0)
}

// DeleteClusterRoleBinding mocks base method.
func (m *MockExtendedK8sClient) DeleteClusterRoleBinding(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding.
func (mr *MockExtendedK8sClientMockRecorder) DeleteClusterRoleBinding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteClusterRoleBinding), arg0)
}

// DeleteClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteClusterRoleBindingByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBindingByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBindingByLabel indicates an expected call of DeleteClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteClusterRoleBindingByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteClusterRoleBindingByLabel), arg0)
}

// DeleteClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteClusterRoleByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleByLabel indicates an expected call of DeleteClusterRoleByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteClusterRoleByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteClusterRoleByLabel), arg0)
}

// DeleteConfigMapByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteConfigMapByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigMapByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigMapByLabel indicates an expected call of DeleteConfigMapByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteConfigMapByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigMapByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteConfigMapByLabel), arg0)
}

// DeleteCustomResourceDefinition mocks base method.
func (m *MockExtendedK8sClient) DeleteCustomResourceDefinition(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomResourceDefinition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResourceDefinition indicates an expected call of DeleteCustomResourceDefinition.
func (mr *MockExtendedK8sClientMockRecorder) DeleteCustomResourceDefinition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResourceDefinition", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteCustomResourceDefinition), arg0, arg1)
}

// DeleteDaemonSet mocks base method.
func (m *MockExtendedK8sClient) DeleteDaemonSet(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSet indicates an expected call of DeleteDaemonSet.
func (mr *MockExtendedK8sClientMockRecorder) DeleteDaemonSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSet", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteDaemonSet), arg0, arg1, arg2)
}

// DeleteDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteDaemonSetByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabel indicates an expected call of DeleteDaemonSetByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteDaemonSetByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteDaemonSetByLabel), arg0)
}

// DeleteDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) DeleteDaemonSetByLabelAndName(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabelAndName indicates an expected call of DeleteDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) DeleteDaemonSetByLabelAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteDaemonSetByLabelAndName), arg0, arg1)
}

// DeleteDeployment mocks base method.
func (m *MockExtendedK8sClient) DeleteDeployment(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockExtendedK8sClientMockRecorder) DeleteDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteDeployment), arg0, arg1, arg2)
}

// DeleteDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteDeploymentByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentByLabel indicates an expected call of DeleteDeploymentByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteDeploymentByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteDeploymentByLabel), arg0)
}

// DeleteMultipleOpenShiftSCC mocks base method.
func (m *MockExtendedK8sClient) DeleteMultipleOpenShiftSCC(arg0, arg1 []string, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultipleOpenShiftSCC", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultipleOpenShiftSCC indicates an expected call of DeleteMultipleOpenShiftSCC.
func (mr *MockExtendedK8sClientMockRecorder) DeleteMultipleOpenShiftSCC(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleOpenShiftSCC", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteMultipleOpenShiftSCC), arg0, arg1, arg2)
}

// DeleteMultipleTridentRoleBindings mocks base method.
func (m *MockExtendedK8sClient) DeleteMultipleTridentRoleBindings(arg0 []string, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultipleTridentRoleBindings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultipleTridentRoleBindings indicates an expected call of DeleteMultipleTridentRoleBindings.
func (mr *MockExtendedK8sClientMockRecorder) DeleteMultipleTridentRoleBindings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleTridentRoleBindings", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteMultipleTridentRoleBindings), arg0, arg1)
}

// DeleteMultipleTridentRoles mocks base method.
func (m *MockExtendedK8sClient) DeleteMultipleTridentRoles(arg0 []string, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultipleTridentRoles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultipleTridentRoles indicates an expected call of DeleteMultipleTridentRoles.
func (mr *MockExtendedK8sClientMockRecorder) DeleteMultipleTridentRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleTridentRoles", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteMultipleTridentRoles), arg0, arg1)
}

// DeleteMultipleTridentServiceAccounts mocks base method.
func (m *MockExtendedK8sClient) DeleteMultipleTridentServiceAccounts(arg0 []string, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultipleTridentServiceAccounts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultipleTridentServiceAccounts indicates an expected call of DeleteMultipleTridentServiceAccounts.
func (mr *MockExtendedK8sClientMockRecorder) DeleteMultipleTridentServiceAccounts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleTridentServiceAccounts", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteMultipleTridentServiceAccounts), arg0, arg1, arg2)
}

// DeleteObjectByFile mocks base method.
func (m *MockExtendedK8sClient) DeleteObjectByFile(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByFile indicates an expected call of DeleteObjectByFile.
func (mr *MockExtendedK8sClientMockRecorder) DeleteObjectByFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByFile", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteObjectByFile), arg0, arg1)
}

// DeleteObjectByYAML mocks base method.
func (m *MockExtendedK8sClient) DeleteObjectByYAML(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByYAML", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByYAML indicates an expected call of DeleteObjectByYAML.
func (mr *MockExtendedK8sClientMockRecorder) DeleteObjectByYAML(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByYAML", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteObjectByYAML), arg0, arg1)
}

// DeletePVByLabel mocks base method.
func (m *MockExtendedK8sClient) DeletePVByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePVByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePVByLabel indicates an expected call of DeletePVByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeletePVByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePVByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeletePVByLabel), arg0)
}

// DeletePVCByLabel mocks base method.
func (m *MockExtendedK8sClient) DeletePVCByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePVCByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePVCByLabel indicates an expected call of DeletePVCByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeletePVCByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePVCByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeletePVCByLabel), arg0)
}

// DeletePod mocks base method.
func (m *MockExtendedK8sClient) DeletePod(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockExtendedK8sClientMockRecorder) DeletePod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeletePod), arg0, arg1)
}

// DeletePodByLabel mocks base method.
func (m *MockExtendedK8sClient) DeletePodByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodByLabel indicates an expected call of DeletePodByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeletePodByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeletePodByLabel), arg0)
}

// DeletePodSecurityPolicy mocks base method.
func (m *MockExtendedK8sClient) DeletePodSecurityPolicy(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodSecurityPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodSecurityPolicy indicates an expected call of DeletePodSecurityPolicy.
func (mr *MockExtendedK8sClientMockRecorder) DeletePodSecurityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodSecurityPolicy", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeletePodSecurityPolicy), arg0)
}

// DeletePodSecurityPolicyByLabel mocks base method.
func (m *MockExtendedK8sClient) DeletePodSecurityPolicyByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodSecurityPolicyByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodSecurityPolicyByLabel indicates an expected call of DeletePodSecurityPolicyByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeletePodSecurityPolicyByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodSecurityPolicyByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeletePodSecurityPolicyByLabel), arg0)
}

// DeleteResourceQuota mocks base method.
func (m *MockExtendedK8sClient) DeleteResourceQuota(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuota", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuota indicates an expected call of DeleteResourceQuota.
func (mr *MockExtendedK8sClientMockRecorder) DeleteResourceQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuota", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteResourceQuota), arg0)
}

// DeleteResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteResourceQuotaByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuotaByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuotaByLabel indicates an expected call of DeleteResourceQuotaByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteResourceQuotaByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteResourceQuotaByLabel), arg0)
}

// DeleteRole mocks base method.
func (m *MockExtendedK8sClient) DeleteRole(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockExtendedK8sClientMockRecorder) DeleteRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteRole), arg0)
}

// DeleteRoleBinding mocks base method.
func (m *MockExtendedK8sClient) DeleteRoleBinding(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockExtendedK8sClientMockRecorder) DeleteRoleBinding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteRoleBinding), arg0)
}

// DeleteSecret mocks base method.
func (m *MockExtendedK8sClient) DeleteSecret(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockExtendedK8sClientMockRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteSecret), arg0, arg1)
}

// DeleteSecretByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteSecretByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretByLabel indicates an expected call of DeleteSecretByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteSecretByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteSecretByLabel), arg0)
}

// DeleteSecretDefault mocks base method.
func (m *MockExtendedK8sClient) DeleteSecretDefault(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretDefault", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretDefault indicates an expected call of DeleteSecretDefault.
func (mr *MockExtendedK8sClientMockRecorder) DeleteSecretDefault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretDefault", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteSecretDefault), arg0)
}

// DeleteService mocks base method.
func (m *MockExtendedK8sClient) DeleteService(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockExtendedK8sClientMockRecorder) DeleteService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteService), arg0, arg1)
}

// DeleteServiceAccount mocks base method.
func (m *MockExtendedK8sClient) DeleteServiceAccount(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockExtendedK8sClientMockRecorder) DeleteServiceAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteServiceAccount), arg0, arg1, arg2)
}

// DeleteServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteServiceAccountByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccountByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccountByLabel indicates an expected call of DeleteServiceAccountByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteServiceAccountByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteServiceAccountByLabel), arg0)
}

// DeleteServiceByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteServiceByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceByLabel indicates an expected call of DeleteServiceByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteServiceByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteServiceByLabel), arg0)
}

// DeleteStatefulSet mocks base method.
func (m *MockExtendedK8sClient) DeleteStatefulSet(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatefulSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatefulSet indicates an expected call of DeleteStatefulSet.
func (mr *MockExtendedK8sClientMockRecorder) DeleteStatefulSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatefulSet", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteStatefulSet), arg0, arg1)
}

// DeleteStatefulSetByLabel mocks base method.
func (m *MockExtendedK8sClient) DeleteStatefulSetByLabel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatefulSetByLabel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatefulSetByLabel indicates an expected call of DeleteStatefulSetByLabel.
func (mr *MockExtendedK8sClientMockRecorder) DeleteStatefulSetByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatefulSetByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteStatefulSetByLabel), arg0)
}

// DeleteTransientVersionPod mocks base method.
func (m *MockExtendedK8sClient) DeleteTransientVersionPod(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransientVersionPod", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransientVersionPod indicates an expected call of DeleteTransientVersionPod.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTransientVersionPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransientVersionPod", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTransientVersionPod), arg0)
}

// DeleteTridentClusterRole mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentClusterRole(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentClusterRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentClusterRole indicates an expected call of DeleteTridentClusterRole.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentClusterRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentClusterRole", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentClusterRole), arg0, arg1)
}

// DeleteTridentClusterRoleBinding mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentClusterRoleBinding(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentClusterRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentClusterRoleBinding indicates an expected call of DeleteTridentClusterRoleBinding.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentClusterRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentClusterRoleBinding", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentClusterRoleBinding), arg0, arg1)
}

// DeleteTridentDaemonSet mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentDaemonSet(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentDaemonSet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentDaemonSet indicates an expected call of DeleteTridentDaemonSet.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentDaemonSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentDaemonSet", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentDaemonSet), arg0)
}

// DeleteTridentDeployment mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentDeployment(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentDeployment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentDeployment indicates an expected call of DeleteTridentDeployment.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentDeployment", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentDeployment), arg0)
}

// DeleteTridentPodSecurityPolicy mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentPodSecurityPolicy(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentPodSecurityPolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentPodSecurityPolicy indicates an expected call of DeleteTridentPodSecurityPolicy.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentPodSecurityPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentPodSecurityPolicy", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentPodSecurityPolicy), arg0, arg1)
}

// DeleteTridentResourceQuota mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentResourceQuota(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentResourceQuota", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentResourceQuota indicates an expected call of DeleteTridentResourceQuota.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentResourceQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentResourceQuota", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentResourceQuota), arg0)
}

// DeleteTridentSecret mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentSecret(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentSecret indicates an expected call of DeleteTridentSecret.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentSecret", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentSecret), arg0, arg1, arg2)
}

// DeleteTridentService mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentService(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentService indicates an expected call of DeleteTridentService.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentService", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentService), arg0, arg1, arg2)
}

// DeleteTridentStatefulSet mocks base method.
func (m *MockExtendedK8sClient) DeleteTridentStatefulSet(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTridentStatefulSet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTridentStatefulSet indicates an expected call of DeleteTridentStatefulSet.
func (mr *MockExtendedK8sClientMockRecorder) DeleteTridentStatefulSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTridentStatefulSet", reflect.TypeOf((*MockExtendedK8sClient)(nil).DeleteTridentStatefulSet), arg0)
}

// Exec mocks base method.
func (m *MockExtendedK8sClient) Exec(arg0, arg1 string, arg2 []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockExtendedK8sClientMockRecorder) Exec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExtendedK8sClient)(nil).Exec), arg0, arg1, arg2)
}

// ExecPodForVersionInformation mocks base method.
func (m *MockExtendedK8sClient) ExecPodForVersionInformation(arg0 string, arg1 []string, arg2 time.Duration) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecPodForVersionInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecPodForVersionInformation indicates an expected call of ExecPodForVersionInformation.
func (mr *MockExtendedK8sClientMockRecorder) ExecPodForVersionInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecPodForVersionInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).ExecPodForVersionInformation), arg0, arg1, arg2)
}

// Flavor mocks base method.
func (m *MockExtendedK8sClient) Flavor() k8sclient.OrchestratorFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flavor")
	ret0, _ := ret[0].(k8sclient.OrchestratorFlavor)
	return ret0
}

// Flavor indicates an expected call of Flavor.
func (mr *MockExtendedK8sClientMockRecorder) Flavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flavor", reflect.TypeOf((*MockExtendedK8sClient)(nil).Flavor))
}

// FollowPodLogs mocks base method.
func (m *MockExtendedK8sClient) FollowPodLogs(arg0, arg1, arg2 string, arg3 k8sclient.LogLineCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FollowPodLogs", arg0, arg1, arg2, arg3)
}

// FollowPodLogs indicates an expected call of FollowPodLogs.
func (mr *MockExtendedK8sClientMockRecorder) FollowPodLogs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowPodLogs", reflect.TypeOf((*MockExtendedK8sClient)(nil).FollowPodLogs), arg0, arg1, arg2, arg3)
}

// GetCRD mocks base method.
func (m *MockExtendedK8sClient) GetCRD(arg0 string) (*v14.CustomResourceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRD", arg0)
	ret0, _ := ret[0].(*v14.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRD indicates an expected call of GetCRD.
func (mr *MockExtendedK8sClientMockRecorder) GetCRD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRD", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetCRD), arg0)
}

// GetCRDClient mocks base method.
func (m *MockExtendedK8sClient) GetCRDClient() (*versioned.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRDClient")
	ret0, _ := ret[0].(*versioned.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRDClient indicates an expected call of GetCRDClient.
func (mr *MockExtendedK8sClientMockRecorder) GetCRDClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRDClient", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetCRDClient))
}

// GetCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClient) GetCSIDriverByLabel(arg0 string) (*v13.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriverByLabel", arg0)
	ret0, _ := ret[0].(*v13.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriverByLabel indicates an expected call of GetCSIDriverByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetCSIDriverByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetCSIDriverByLabel), arg0)
}

// GetCSIDriverInformation mocks base method.
func (m *MockExtendedK8sClient) GetCSIDriverInformation(arg0, arg1 string, arg2 bool) (*v13.CSIDriver, []v13.CSIDriver, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriverInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v13.CSIDriver)
	ret1, _ := ret[1].([]v13.CSIDriver)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetCSIDriverInformation indicates an expected call of GetCSIDriverInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetCSIDriverInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriverInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetCSIDriverInformation), arg0, arg1, arg2)
}

// GetCSIDriversByLabel mocks base method.
func (m *MockExtendedK8sClient) GetCSIDriversByLabel(arg0 string) ([]v13.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriversByLabel", arg0)
	ret0, _ := ret[0].([]v13.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriversByLabel indicates an expected call of GetCSIDriversByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetCSIDriversByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriversByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetCSIDriversByLabel), arg0)
}

// GetCSISnapshotterVersion mocks base method.
func (m *MockExtendedK8sClient) GetCSISnapshotterVersion(arg0 *v10.Deployment) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSISnapshotterVersion", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCSISnapshotterVersion indicates an expected call of GetCSISnapshotterVersion.
func (mr *MockExtendedK8sClientMockRecorder) GetCSISnapshotterVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSISnapshotterVersion", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetCSISnapshotterVersion), arg0)
}

// GetClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClient) GetClusterRoleBindingByLabel(arg0 string) (*v12.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabel", arg0)
	ret0, _ := ret[0].(*v12.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabel indicates an expected call of GetClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetClusterRoleBindingByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetClusterRoleBindingByLabel), arg0)
}

// GetClusterRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) GetClusterRoleBindingByLabelAndName(arg0, arg1 string) (*v12.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v12.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabelAndName indicates an expected call of GetClusterRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) GetClusterRoleBindingByLabelAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetClusterRoleBindingByLabelAndName), arg0, arg1)
}

// GetClusterRoleBindingInformation mocks base method.
func (m *MockExtendedK8sClient) GetClusterRoleBindingInformation(arg0, arg1 string, arg2 bool) (*v12.ClusterRoleBinding, []v12.ClusterRoleBinding, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v12.ClusterRoleBinding)
	ret1, _ := ret[1].([]v12.ClusterRoleBinding)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetClusterRoleBindingInformation indicates an expected call of GetClusterRoleBindingInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetClusterRoleBindingInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetClusterRoleBindingInformation), arg0, arg1, arg2)
}

// GetClusterRoleBindingsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetClusterRoleBindingsByLabel(arg0 string) ([]v12.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingsByLabel", arg0)
	ret0, _ := ret[0].([]v12.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingsByLabel indicates an expected call of GetClusterRoleBindingsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetClusterRoleBindingsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetClusterRoleBindingsByLabel), arg0)
}

// GetClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClient) GetClusterRoleByLabel(arg0 string) (*v12.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabel", arg0)
	ret0, _ := ret[0].(*v12.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabel indicates an expected call of GetClusterRoleByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetClusterRoleByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetClusterRoleByLabel), arg0)
}

// GetClusterRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) GetClusterRoleByLabelAndName(arg0, arg1 string) (*v12.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v12.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabelAndName indicates an expected call of GetClusterRoleByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) GetClusterRoleByLabelAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetClusterRoleByLabelAndName), arg0, arg1)
}

// GetClusterRoleInformation mocks base method.
func (m *MockExtendedK8sClient) GetClusterRoleInformation(arg0, arg1 string, arg2 bool) (*v12.ClusterRole, []v12.ClusterRole, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v12.ClusterRole)
	ret1, _ := ret[1].([]v12.ClusterRole)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetClusterRoleInformation indicates an expected call of GetClusterRoleInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetClusterRoleInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetClusterRoleInformation), arg0, arg1, arg2)
}

// GetClusterRolesByLabel mocks base method.
func (m *MockExtendedK8sClient) GetClusterRolesByLabel(arg0 string) ([]v12.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRolesByLabel", arg0)
	ret0, _ := ret[0].([]v12.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRolesByLabel indicates an expected call of GetClusterRolesByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetClusterRolesByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRolesByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetClusterRolesByLabel), arg0)
}

// GetConfigMapByLabel mocks base method.
func (m *MockExtendedK8sClient) GetConfigMapByLabel(arg0 string, arg1 bool) (*v11.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v11.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMapByLabel indicates an expected call of GetConfigMapByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetConfigMapByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetConfigMapByLabel), arg0, arg1)
}

// GetConfigMapsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetConfigMapsByLabel(arg0 string, arg1 bool) ([]v11.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v11.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMapsByLabel indicates an expected call of GetConfigMapsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetConfigMapsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetConfigMapsByLabel), arg0, arg1)
}

// GetDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClient) GetDaemonSetByLabel(arg0 string, arg1 bool) (*v10.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabel indicates an expected call of GetDaemonSetByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetDaemonSetByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetDaemonSetByLabel), arg0, arg1)
}

// GetDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) GetDaemonSetByLabelAndName(arg0, arg1 string, arg2 bool) (*v10.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabelAndName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabelAndName indicates an expected call of GetDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) GetDaemonSetByLabelAndName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetDaemonSetByLabelAndName), arg0, arg1, arg2)
}

// GetDaemonSetInformation mocks base method.
func (m *MockExtendedK8sClient) GetDaemonSetInformation(arg0, arg1 string, arg2 bool) (*v10.DaemonSet, []v10.DaemonSet, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.DaemonSet)
	ret1, _ := ret[1].([]v10.DaemonSet)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDaemonSetInformation indicates an expected call of GetDaemonSetInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetDaemonSetInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetDaemonSetInformation), arg0, arg1, arg2)
}

// GetDaemonSetsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetDaemonSetsByLabel(arg0 string, arg1 bool) ([]v10.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v10.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetsByLabel indicates an expected call of GetDaemonSetsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetDaemonSetsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetDaemonSetsByLabel), arg0, arg1)
}

// GetDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClient) GetDeploymentByLabel(arg0 string, arg1 bool) (*v10.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentByLabel indicates an expected call of GetDeploymentByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetDeploymentByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetDeploymentByLabel), arg0, arg1)
}

// GetDeploymentInformation mocks base method.
func (m *MockExtendedK8sClient) GetDeploymentInformation(arg0, arg1, arg2 string) (*v10.Deployment, []v10.Deployment, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.Deployment)
	ret1, _ := ret[1].([]v10.Deployment)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeploymentInformation indicates an expected call of GetDeploymentInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetDeploymentInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetDeploymentInformation), arg0, arg1, arg2)
}

// GetDeploymentsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetDeploymentsByLabel(arg0 string, arg1 bool) ([]v10.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v10.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsByLabel indicates an expected call of GetDeploymentsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetDeploymentsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetDeploymentsByLabel), arg0, arg1)
}

// GetMultiplePodSecurityPolicyInformation mocks base method.
func (m *MockExtendedK8sClient) GetMultiplePodSecurityPolicyInformation(arg0 []string, arg1 string, arg2 bool) (map[string]*v1beta1.PodSecurityPolicy, []v1beta1.PodSecurityPolicy, map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiplePodSecurityPolicyInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]*v1beta1.PodSecurityPolicy)
	ret1, _ := ret[1].([]v1beta1.PodSecurityPolicy)
	ret2, _ := ret[2].(map[string]bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetMultiplePodSecurityPolicyInformation indicates an expected call of GetMultiplePodSecurityPolicyInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetMultiplePodSecurityPolicyInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiplePodSecurityPolicyInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetMultiplePodSecurityPolicyInformation), arg0, arg1, arg2)
}

// GetMultipleRoleBindingInformation mocks base method.
func (m *MockExtendedK8sClient) GetMultipleRoleBindingInformation(arg0 []string, arg1 string, arg2 bool) (map[string]*v12.RoleBinding, []v12.RoleBinding, map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleRoleBindingInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]*v12.RoleBinding)
	ret1, _ := ret[1].([]v12.RoleBinding)
	ret2, _ := ret[2].(map[string]bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetMultipleRoleBindingInformation indicates an expected call of GetMultipleRoleBindingInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetMultipleRoleBindingInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleRoleBindingInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetMultipleRoleBindingInformation), arg0, arg1, arg2)
}

// GetMultipleRoleInformation mocks base method.
func (m *MockExtendedK8sClient) GetMultipleRoleInformation(arg0 []string, arg1 string, arg2 bool) (map[string]*v12.Role, []v12.Role, map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleRoleInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]*v12.Role)
	ret1, _ := ret[1].([]v12.Role)
	ret2, _ := ret[2].(map[string]bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetMultipleRoleInformation indicates an expected call of GetMultipleRoleInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetMultipleRoleInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleRoleInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetMultipleRoleInformation), arg0, arg1, arg2)
}

// GetMultipleServiceAccountInformation mocks base method.
func (m *MockExtendedK8sClient) GetMultipleServiceAccountInformation(arg0 []string, arg1, arg2 string, arg3 bool) (map[string]*v11.ServiceAccount, []v11.ServiceAccount, map[string][]string, map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleServiceAccountInformation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]*v11.ServiceAccount)
	ret1, _ := ret[1].([]v11.ServiceAccount)
	ret2, _ := ret[2].(map[string][]string)
	ret3, _ := ret[3].(map[string]bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetMultipleServiceAccountInformation indicates an expected call of GetMultipleServiceAccountInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetMultipleServiceAccountInformation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleServiceAccountInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetMultipleServiceAccountInformation), arg0, arg1, arg2, arg3)
}

// GetMultipleTridentOpenShiftSCCInformation mocks base method.
func (m *MockExtendedK8sClient) GetMultipleTridentOpenShiftSCCInformation(arg0, arg1 []string, arg2 bool) (map[string][]byte, map[string]bool, map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleTridentOpenShiftSCCInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(map[string]bool)
	ret2, _ := ret[2].(map[string]bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetMultipleTridentOpenShiftSCCInformation indicates an expected call of GetMultipleTridentOpenShiftSCCInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetMultipleTridentOpenShiftSCCInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleTridentOpenShiftSCCInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetMultipleTridentOpenShiftSCCInformation), arg0, arg1, arg2)
}

// GetNamespace mocks base method.
func (m *MockExtendedK8sClient) GetNamespace(arg0 string) (*v11.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0)
	ret0, _ := ret[0].(*v11.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockExtendedK8sClientMockRecorder) GetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetNamespace), arg0)
}

// GetOpenShiftSCCByName mocks base method.
func (m *MockExtendedK8sClient) GetOpenShiftSCCByName(arg0, arg1 string) (bool, bool, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenShiftSCCByName", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOpenShiftSCCByName indicates an expected call of GetOpenShiftSCCByName.
func (mr *MockExtendedK8sClientMockRecorder) GetOpenShiftSCCByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenShiftSCCByName", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetOpenShiftSCCByName), arg0, arg1)
}

// GetPV mocks base method.
func (m *MockExtendedK8sClient) GetPV(arg0 string) (*v11.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPV", arg0)
	ret0, _ := ret[0].(*v11.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPV indicates an expected call of GetPV.
func (mr *MockExtendedK8sClientMockRecorder) GetPV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPV", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetPV), arg0)
}

// GetPVByLabel mocks base method.
func (m *MockExtendedK8sClient) GetPVByLabel(arg0 string) (*v11.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVByLabel", arg0)
	ret0, _ := ret[0].(*v11.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVByLabel indicates an expected call of GetPVByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetPVByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetPVByLabel), arg0)
}

// GetPVC mocks base method.
func (m *MockExtendedK8sClient) GetPVC(arg0 string) (*v11.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVC", arg0)
	ret0, _ := ret[0].(*v11.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVC indicates an expected call of GetPVC.
func (mr *MockExtendedK8sClientMockRecorder) GetPVC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVC", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetPVC), arg0)
}

// GetPVCByLabel mocks base method.
func (m *MockExtendedK8sClient) GetPVCByLabel(arg0 string, arg1 bool) (*v11.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVCByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v11.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVCByLabel indicates an expected call of GetPVCByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetPVCByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVCByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetPVCByLabel), arg0, arg1)
}

// GetPodByLabel mocks base method.
func (m *MockExtendedK8sClient) GetPodByLabel(arg0 string, arg1 bool) (*v11.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v11.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodByLabel indicates an expected call of GetPodByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetPodByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetPodByLabel), arg0, arg1)
}

// GetPodSecurityPoliciesByLabel mocks base method.
func (m *MockExtendedK8sClient) GetPodSecurityPoliciesByLabel(arg0 string) ([]v1beta1.PodSecurityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodSecurityPoliciesByLabel", arg0)
	ret0, _ := ret[0].([]v1beta1.PodSecurityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodSecurityPoliciesByLabel indicates an expected call of GetPodSecurityPoliciesByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetPodSecurityPoliciesByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodSecurityPoliciesByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetPodSecurityPoliciesByLabel), arg0)
}

// GetPodSecurityPolicyByLabel mocks base method.
func (m *MockExtendedK8sClient) GetPodSecurityPolicyByLabel(arg0 string) (*v1beta1.PodSecurityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodSecurityPolicyByLabel", arg0)
	ret0, _ := ret[0].(*v1beta1.PodSecurityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodSecurityPolicyByLabel indicates an expected call of GetPodSecurityPolicyByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetPodSecurityPolicyByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodSecurityPolicyByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetPodSecurityPolicyByLabel), arg0)
}

// GetPodsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetPodsByLabel(arg0 string, arg1 bool) ([]v11.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v11.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsByLabel indicates an expected call of GetPodsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetPodsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetPodsByLabel), arg0, arg1)
}

// GetResourceQuota mocks base method.
func (m *MockExtendedK8sClient) GetResourceQuota(arg0 string) (*v11.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuota", arg0)
	ret0, _ := ret[0].(*v11.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuota indicates an expected call of GetResourceQuota.
func (mr *MockExtendedK8sClientMockRecorder) GetResourceQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuota", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetResourceQuota), arg0)
}

// GetResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClient) GetResourceQuotaByLabel(arg0 string) (*v11.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotaByLabel", arg0)
	ret0, _ := ret[0].(*v11.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotaByLabel indicates an expected call of GetResourceQuotaByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetResourceQuotaByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetResourceQuotaByLabel), arg0)
}

// GetResourceQuotaInformation mocks base method.
func (m *MockExtendedK8sClient) GetResourceQuotaInformation(arg0, arg1, arg2 string) (*v11.ResourceQuota, []v11.ResourceQuota, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotaInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v11.ResourceQuota)
	ret1, _ := ret[1].([]v11.ResourceQuota)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetResourceQuotaInformation indicates an expected call of GetResourceQuotaInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetResourceQuotaInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotaInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetResourceQuotaInformation), arg0, arg1, arg2)
}

// GetResourceQuotasByLabel mocks base method.
func (m *MockExtendedK8sClient) GetResourceQuotasByLabel(arg0 string) ([]v11.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotasByLabel", arg0)
	ret0, _ := ret[0].([]v11.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotasByLabel indicates an expected call of GetResourceQuotasByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetResourceQuotasByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotasByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetResourceQuotasByLabel), arg0)
}

// GetRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) GetRoleBindingByLabelAndName(arg0, arg1 string) (*v12.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingByLabelAndName", arg0, arg1)
	ret0, _ := ret[0].(*v12.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingByLabelAndName indicates an expected call of GetRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) GetRoleBindingByLabelAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetRoleBindingByLabelAndName), arg0, arg1)
}

// GetRoleBindingsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetRoleBindingsByLabel(arg0 string) ([]v12.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingsByLabel", arg0)
	ret0, _ := ret[0].([]v12.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingsByLabel indicates an expected call of GetRoleBindingsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetRoleBindingsByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetRoleBindingsByLabel), arg0)
}

// GetRolesByLabel mocks base method.
func (m *MockExtendedK8sClient) GetRolesByLabel(arg0 string) ([]v12.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesByLabel", arg0)
	ret0, _ := ret[0].([]v12.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesByLabel indicates an expected call of GetRolesByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetRolesByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetRolesByLabel), arg0)
}

// GetSecret mocks base method.
func (m *MockExtendedK8sClient) GetSecret(arg0 string) (*v11.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0)
	ret0, _ := ret[0].(*v11.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockExtendedK8sClientMockRecorder) GetSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetSecret), arg0)
}

// GetSecretByLabel mocks base method.
func (m *MockExtendedK8sClient) GetSecretByLabel(arg0 string, arg1 bool) (*v11.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v11.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByLabel indicates an expected call of GetSecretByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetSecretByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetSecretByLabel), arg0, arg1)
}

// GetSecretInformation mocks base method.
func (m *MockExtendedK8sClient) GetSecretInformation(arg0, arg1, arg2 string, arg3 bool) (*v11.Secret, []v11.Secret, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretInformation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v11.Secret)
	ret1, _ := ret[1].([]v11.Secret)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetSecretInformation indicates an expected call of GetSecretInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetSecretInformation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetSecretInformation), arg0, arg1, arg2, arg3)
}

// GetSecretsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetSecretsByLabel(arg0 string, arg1 bool) ([]v11.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v11.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsByLabel indicates an expected call of GetSecretsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetSecretsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetSecretsByLabel), arg0, arg1)
}

// GetServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClient) GetServiceAccountByLabel(arg0 string, arg1 bool) (*v11.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v11.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabel indicates an expected call of GetServiceAccountByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetServiceAccountByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetServiceAccountByLabel), arg0, arg1)
}

// GetServiceAccountByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) GetServiceAccountByLabelAndName(arg0, arg1 string, arg2 bool) (*v11.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabelAndName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v11.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabelAndName indicates an expected call of GetServiceAccountByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) GetServiceAccountByLabelAndName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetServiceAccountByLabelAndName), arg0, arg1, arg2)
}

// GetServiceAccountsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetServiceAccountsByLabel(arg0 string, arg1 bool) ([]v11.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v11.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountsByLabel indicates an expected call of GetServiceAccountsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetServiceAccountsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetServiceAccountsByLabel), arg0, arg1)
}

// GetServiceByLabel mocks base method.
func (m *MockExtendedK8sClient) GetServiceByLabel(arg0 string, arg1 bool) (*v11.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v11.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByLabel indicates an expected call of GetServiceByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetServiceByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetServiceByLabel), arg0, arg1)
}

// GetServiceInformation mocks base method.
func (m *MockExtendedK8sClient) GetServiceInformation(arg0, arg1, arg2 string, arg3 bool) (*v11.Service, []v11.Service, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInformation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v11.Service)
	ret1, _ := ret[1].([]v11.Service)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetServiceInformation indicates an expected call of GetServiceInformation.
func (mr *MockExtendedK8sClientMockRecorder) GetServiceInformation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInformation", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetServiceInformation), arg0, arg1, arg2, arg3)
}

// GetServicesByLabel mocks base method.
func (m *MockExtendedK8sClient) GetServicesByLabel(arg0 string, arg1 bool) ([]v11.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v11.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesByLabel indicates an expected call of GetServicesByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetServicesByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetServicesByLabel), arg0, arg1)
}

// GetSnapshotterCRDVersion mocks base method.
func (m *MockExtendedK8sClient) GetSnapshotterCRDVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotterCRDVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSnapshotterCRDVersion indicates an expected call of GetSnapshotterCRDVersion.
func (mr *MockExtendedK8sClientMockRecorder) GetSnapshotterCRDVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotterCRDVersion", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetSnapshotterCRDVersion))
}

// GetStatefulSetByLabel mocks base method.
func (m *MockExtendedK8sClient) GetStatefulSetByLabel(arg0 string, arg1 bool) (*v10.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatefulSetByLabel", arg0, arg1)
	ret0, _ := ret[0].(*v10.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatefulSetByLabel indicates an expected call of GetStatefulSetByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetStatefulSetByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatefulSetByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetStatefulSetByLabel), arg0, arg1)
}

// GetStatefulSetsByLabel mocks base method.
func (m *MockExtendedK8sClient) GetStatefulSetsByLabel(arg0 string, arg1 bool) ([]v10.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatefulSetsByLabel", arg0, arg1)
	ret0, _ := ret[0].([]v10.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatefulSetsByLabel indicates an expected call of GetStatefulSetsByLabel.
func (mr *MockExtendedK8sClientMockRecorder) GetStatefulSetsByLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatefulSetsByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).GetStatefulSetsByLabel), arg0, arg1)
}

// IsTopologyInUse mocks base method.
func (m *MockExtendedK8sClient) IsTopologyInUse() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTopologyInUse")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTopologyInUse indicates an expected call of IsTopologyInUse.
func (mr *MockExtendedK8sClientMockRecorder) IsTopologyInUse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTopologyInUse", reflect.TypeOf((*MockExtendedK8sClient)(nil).IsTopologyInUse))
}

// Namespace mocks base method.
func (m *MockExtendedK8sClient) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockExtendedK8sClientMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockExtendedK8sClient)(nil).Namespace))
}

// PatchCRD mocks base method.
func (m *MockExtendedK8sClient) PatchCRD(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCRD", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCRD indicates an expected call of PatchCRD.
func (mr *MockExtendedK8sClientMockRecorder) PatchCRD(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCRD", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchCRD), arg0, arg1, arg2)
}

// PatchCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchCSIDriverByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCSIDriverByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSIDriverByLabel indicates an expected call of PatchCSIDriverByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchCSIDriverByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchCSIDriverByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchClusterRoleBindingByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabel indicates an expected call of PatchClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchClusterRoleBindingByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchClusterRoleBindingByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) PatchClusterRoleBindingByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabelAndName indicates an expected call of PatchClusterRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) PatchClusterRoleBindingByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchClusterRoleBindingByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchClusterRoleByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabel indicates an expected call of PatchClusterRoleByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchClusterRoleByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchClusterRoleByLabel), arg0, arg1, arg2)
}

// PatchClusterRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) PatchClusterRoleByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabelAndName indicates an expected call of PatchClusterRoleByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) PatchClusterRoleByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchClusterRoleByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchDaemonSetByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabel indicates an expected call of PatchDaemonSetByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchDaemonSetByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchDaemonSetByLabel), arg0, arg1, arg2)
}

// PatchDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) PatchDaemonSetByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabelAndName indicates an expected call of PatchDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) PatchDaemonSetByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchDaemonSetByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchDeploymentByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeploymentByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDeploymentByLabel indicates an expected call of PatchDeploymentByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchDeploymentByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchDeploymentByLabel), arg0, arg1, arg2)
}

// PatchNamespace mocks base method.
func (m *MockExtendedK8sClient) PatchNamespace(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespace indicates an expected call of PatchNamespace.
func (mr *MockExtendedK8sClientMockRecorder) PatchNamespace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespace", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchNamespace), arg0, arg1, arg2)
}

// PatchNamespaceLabels mocks base method.
func (m *MockExtendedK8sClient) PatchNamespaceLabels(arg0 string, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespaceLabels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespaceLabels indicates an expected call of PatchNamespaceLabels.
func (mr *MockExtendedK8sClientMockRecorder) PatchNamespaceLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespaceLabels", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchNamespaceLabels), arg0, arg1)
}

// PatchOpenShiftSCC mocks base method.
func (m *MockExtendedK8sClient) PatchOpenShiftSCC(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchOpenShiftSCC", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchOpenShiftSCC indicates an expected call of PatchOpenShiftSCC.
func (mr *MockExtendedK8sClientMockRecorder) PatchOpenShiftSCC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOpenShiftSCC", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchOpenShiftSCC), arg0)
}

// PatchPodSecurityPolicyByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchPodSecurityPolicyByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPodSecurityPolicyByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodSecurityPolicyByLabel indicates an expected call of PatchPodSecurityPolicyByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchPodSecurityPolicyByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodSecurityPolicyByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchPodSecurityPolicyByLabel), arg0, arg1, arg2)
}

// PatchPodSecurityPolicyByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) PatchPodSecurityPolicyByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPodSecurityPolicyByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodSecurityPolicyByLabelAndName indicates an expected call of PatchPodSecurityPolicyByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) PatchPodSecurityPolicyByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodSecurityPolicyByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchPodSecurityPolicyByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchResourceQuotaByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResourceQuotaByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchResourceQuotaByLabel indicates an expected call of PatchResourceQuotaByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchResourceQuotaByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchResourceQuotaByLabel), arg0, arg1, arg2)
}

// PatchRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) PatchRoleBindingByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleBindingByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBindingByLabelAndName indicates an expected call of PatchRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) PatchRoleBindingByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchRoleBindingByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) PatchRoleByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleByLabelAndName indicates an expected call of PatchRoleByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) PatchRoleByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchRoleByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchSecretByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchSecretByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSecretByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSecretByLabel indicates an expected call of PatchSecretByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchSecretByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecretByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchSecretByLabel), arg0, arg1, arg2)
}

// PatchServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchServiceAccountByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabel indicates an expected call of PatchServiceAccountByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchServiceAccountByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchServiceAccountByLabel), arg0, arg1, arg2)
}

// PatchServiceAccountByLabelAndName mocks base method.
func (m *MockExtendedK8sClient) PatchServiceAccountByLabelAndName(arg0, arg1 string, arg2 []byte, arg3 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabelAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabelAndName indicates an expected call of PatchServiceAccountByLabelAndName.
func (mr *MockExtendedK8sClientMockRecorder) PatchServiceAccountByLabelAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabelAndName", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchServiceAccountByLabelAndName), arg0, arg1, arg2, arg3)
}

// PatchServiceByLabel mocks base method.
func (m *MockExtendedK8sClient) PatchServiceByLabel(arg0 string, arg1 []byte, arg2 types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceByLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceByLabel indicates an expected call of PatchServiceByLabel.
func (mr *MockExtendedK8sClientMockRecorder) PatchServiceByLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceByLabel", reflect.TypeOf((*MockExtendedK8sClient)(nil).PatchServiceByLabel), arg0, arg1, arg2)
}

// PutCSIDriver mocks base method.
func (m *MockExtendedK8sClient) PutCSIDriver(arg0 *v13.CSIDriver, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCSIDriver", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCSIDriver indicates an expected call of PutCSIDriver.
func (mr *MockExtendedK8sClientMockRecorder) PutCSIDriver(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCSIDriver", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutCSIDriver), arg0, arg1, arg2, arg3)
}

// PutClusterRole mocks base method.
func (m *MockExtendedK8sClient) PutClusterRole(arg0 *v12.ClusterRole, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutClusterRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutClusterRole indicates an expected call of PutClusterRole.
func (mr *MockExtendedK8sClientMockRecorder) PutClusterRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutClusterRole", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutClusterRole), arg0, arg1, arg2, arg3)
}

// PutClusterRoleBinding mocks base method.
func (m *MockExtendedK8sClient) PutClusterRoleBinding(arg0 *v12.ClusterRoleBinding, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutClusterRoleBinding", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutClusterRoleBinding indicates an expected call of PutClusterRoleBinding.
func (mr *MockExtendedK8sClientMockRecorder) PutClusterRoleBinding(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutClusterRoleBinding", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutClusterRoleBinding), arg0, arg1, arg2, arg3)
}

// PutCustomResourceDefinition mocks base method.
func (m *MockExtendedK8sClient) PutCustomResourceDefinition(arg0 *v14.CustomResourceDefinition, arg1 string, arg2 bool, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCustomResourceDefinition", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCustomResourceDefinition indicates an expected call of PutCustomResourceDefinition.
func (mr *MockExtendedK8sClientMockRecorder) PutCustomResourceDefinition(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCustomResourceDefinition", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutCustomResourceDefinition), arg0, arg1, arg2, arg3)
}

// PutDaemonSet mocks base method.
func (m *MockExtendedK8sClient) PutDaemonSet(arg0 *v10.DaemonSet, arg1 bool, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDaemonSet", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutDaemonSet indicates an expected call of PutDaemonSet.
func (mr *MockExtendedK8sClientMockRecorder) PutDaemonSet(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDaemonSet", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutDaemonSet), arg0, arg1, arg2, arg3, arg4)
}

// PutDeployment mocks base method.
func (m *MockExtendedK8sClient) PutDeployment(arg0 *v10.Deployment, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeployment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutDeployment indicates an expected call of PutDeployment.
func (mr *MockExtendedK8sClientMockRecorder) PutDeployment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeployment", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutDeployment), arg0, arg1, arg2, arg3)
}

// PutOpenShiftSCC mocks base method.
func (m *MockExtendedK8sClient) PutOpenShiftSCC(arg0 []byte, arg1 bool, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOpenShiftSCC", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutOpenShiftSCC indicates an expected call of PutOpenShiftSCC.
func (mr *MockExtendedK8sClientMockRecorder) PutOpenShiftSCC(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOpenShiftSCC", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutOpenShiftSCC), arg0, arg1, arg2)
}

// PutPodSecurityPolicy mocks base method.
func (m *MockExtendedK8sClient) PutPodSecurityPolicy(arg0 *v1beta1.PodSecurityPolicy, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPodSecurityPolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPodSecurityPolicy indicates an expected call of PutPodSecurityPolicy.
func (mr *MockExtendedK8sClientMockRecorder) PutPodSecurityPolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPodSecurityPolicy", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutPodSecurityPolicy), arg0, arg1, arg2, arg3)
}

// PutResourceQuota mocks base method.
func (m *MockExtendedK8sClient) PutResourceQuota(arg0 *v11.ResourceQuota, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourceQuota", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutResourceQuota indicates an expected call of PutResourceQuota.
func (mr *MockExtendedK8sClientMockRecorder) PutResourceQuota(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourceQuota", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutResourceQuota), arg0, arg1, arg2, arg3)
}

// PutRole mocks base method.
func (m *MockExtendedK8sClient) PutRole(arg0 *v12.Role, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRole indicates an expected call of PutRole.
func (mr *MockExtendedK8sClientMockRecorder) PutRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRole", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutRole), arg0, arg1, arg2, arg3)
}

// PutRoleBinding mocks base method.
func (m *MockExtendedK8sClient) PutRoleBinding(arg0 *v12.RoleBinding, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRoleBinding", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRoleBinding indicates an expected call of PutRoleBinding.
func (mr *MockExtendedK8sClientMockRecorder) PutRoleBinding(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRoleBinding", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutRoleBinding), arg0, arg1, arg2, arg3)
}

// PutSecret mocks base method.
func (m *MockExtendedK8sClient) PutSecret(arg0 bool, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSecret indicates an expected call of PutSecret.
func (mr *MockExtendedK8sClientMockRecorder) PutSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSecret", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutSecret), arg0, arg1, arg2)
}

// PutService mocks base method.
func (m *MockExtendedK8sClient) PutService(arg0 *v11.Service, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutService indicates an expected call of PutService.
func (mr *MockExtendedK8sClientMockRecorder) PutService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutService", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutService), arg0, arg1, arg2, arg3)
}

// PutServiceAccount mocks base method.
func (m *MockExtendedK8sClient) PutServiceAccount(arg0 *v11.ServiceAccount, arg1 bool, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutServiceAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutServiceAccount indicates an expected call of PutServiceAccount.
func (mr *MockExtendedK8sClientMockRecorder) PutServiceAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutServiceAccount", reflect.TypeOf((*MockExtendedK8sClient)(nil).PutServiceAccount), arg0, arg1, arg2, arg3)
}

// RemoveFinalizerFromCRD mocks base method.
func (m *MockExtendedK8sClient) RemoveFinalizerFromCRD(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFinalizerFromCRD", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFinalizerFromCRD indicates an expected call of RemoveFinalizerFromCRD.
func (mr *MockExtendedK8sClientMockRecorder) RemoveFinalizerFromCRD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizerFromCRD", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveFinalizerFromCRD), arg0)
}

// RemoveMultipleCSIDriverCRs mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleCSIDriverCRs(arg0 []v13.CSIDriver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleCSIDriverCRs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleCSIDriverCRs indicates an expected call of RemoveMultipleCSIDriverCRs.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleCSIDriverCRs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleCSIDriverCRs", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleCSIDriverCRs), arg0)
}

// RemoveMultipleClusterRoleBindings mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleClusterRoleBindings(arg0 []v12.ClusterRoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleClusterRoleBindings", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleClusterRoleBindings indicates an expected call of RemoveMultipleClusterRoleBindings.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleClusterRoleBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleClusterRoleBindings", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleClusterRoleBindings), arg0)
}

// RemoveMultipleClusterRoles mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleClusterRoles(arg0 []v12.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleClusterRoles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleClusterRoles indicates an expected call of RemoveMultipleClusterRoles.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleClusterRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleClusterRoles", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleClusterRoles), arg0)
}

// RemoveMultipleDaemonSets mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleDaemonSets(arg0 []v10.DaemonSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleDaemonSets", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleDaemonSets indicates an expected call of RemoveMultipleDaemonSets.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleDaemonSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleDaemonSets", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleDaemonSets), arg0)
}

// RemoveMultipleDeployments mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleDeployments(arg0 []v10.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleDeployments", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleDeployments indicates an expected call of RemoveMultipleDeployments.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleDeployments", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleDeployments), arg0)
}

// RemoveMultiplePodSecurityPolicies mocks base method.
func (m *MockExtendedK8sClient) RemoveMultiplePodSecurityPolicies(arg0 []v1beta1.PodSecurityPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultiplePodSecurityPolicies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultiplePodSecurityPolicies indicates an expected call of RemoveMultiplePodSecurityPolicies.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultiplePodSecurityPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultiplePodSecurityPolicies", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultiplePodSecurityPolicies), arg0)
}

// RemoveMultiplePods mocks base method.
func (m *MockExtendedK8sClient) RemoveMultiplePods(arg0 []v11.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultiplePods", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultiplePods indicates an expected call of RemoveMultiplePods.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultiplePods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultiplePods", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultiplePods), arg0)
}

// RemoveMultipleResourceQuotas mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleResourceQuotas(arg0 []v11.ResourceQuota) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleResourceQuotas", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleResourceQuotas indicates an expected call of RemoveMultipleResourceQuotas.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleResourceQuotas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleResourceQuotas", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleResourceQuotas), arg0)
}

// RemoveMultipleRoleBindings mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleRoleBindings(arg0 []v12.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleRoleBindings", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleRoleBindings indicates an expected call of RemoveMultipleRoleBindings.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleRoleBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleRoleBindings", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleRoleBindings), arg0)
}

// RemoveMultipleRoles mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleRoles(arg0 []v12.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleRoles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleRoles indicates an expected call of RemoveMultipleRoles.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleRoles", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleRoles), arg0)
}

// RemoveMultipleSecrets mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleSecrets(arg0 []v11.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleSecrets", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleSecrets indicates an expected call of RemoveMultipleSecrets.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleSecrets", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleSecrets), arg0)
}

// RemoveMultipleServiceAccounts mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleServiceAccounts(arg0 []v11.ServiceAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleServiceAccounts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleServiceAccounts indicates an expected call of RemoveMultipleServiceAccounts.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleServiceAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleServiceAccounts", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleServiceAccounts), arg0)
}

// RemoveMultipleServices mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleServices(arg0 []v11.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleServices indicates an expected call of RemoveMultipleServices.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleServices", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleServices), arg0)
}

// RemoveMultipleStatefulSets mocks base method.
func (m *MockExtendedK8sClient) RemoveMultipleStatefulSets(arg0 []v10.StatefulSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleStatefulSets", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipleStatefulSets indicates an expected call of RemoveMultipleStatefulSets.
func (mr *MockExtendedK8sClientMockRecorder) RemoveMultipleStatefulSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleStatefulSets", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveMultipleStatefulSets), arg0)
}

// RemoveTridentUserFromOpenShiftSCC mocks base method.
func (m *MockExtendedK8sClient) RemoveTridentUserFromOpenShiftSCC(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTridentUserFromOpenShiftSCC", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTridentUserFromOpenShiftSCC indicates an expected call of RemoveTridentUserFromOpenShiftSCC.
func (mr *MockExtendedK8sClientMockRecorder) RemoveTridentUserFromOpenShiftSCC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTridentUserFromOpenShiftSCC", reflect.TypeOf((*MockExtendedK8sClient)(nil).RemoveTridentUserFromOpenShiftSCC), arg0, arg1)
}

// ServerVersion mocks base method.
func (m *MockExtendedK8sClient) ServerVersion() *utils.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*utils.Version)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockExtendedK8sClientMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockExtendedK8sClient)(nil).ServerVersion))
}

// SetNamespace mocks base method.
func (m *MockExtendedK8sClient) SetNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", arg0)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockExtendedK8sClientMockRecorder) SetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockExtendedK8sClient)(nil).SetNamespace), arg0)
}

// SetTimeout mocks base method.
func (m *MockExtendedK8sClient) SetTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", arg0)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockExtendedK8sClientMockRecorder) SetTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockExtendedK8sClient)(nil).SetTimeout), arg0)
}

// UpdateSecret mocks base method.
func (m *MockExtendedK8sClient) UpdateSecret(arg0 *v11.Secret) (*v11.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0)
	ret0, _ := ret[0].(*v11.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockExtendedK8sClientMockRecorder) UpdateSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockExtendedK8sClient)(nil).UpdateSecret), arg0)
}

// Version mocks base method.
func (m *MockExtendedK8sClient) Version() *version.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*version.Info)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockExtendedK8sClientMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockExtendedK8sClient)(nil).Version))
}

// WaitForCRDEstablished mocks base method.
func (m *MockExtendedK8sClient) WaitForCRDEstablished(arg0 string, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCRDEstablished", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCRDEstablished indicates an expected call of WaitForCRDEstablished.
func (mr *MockExtendedK8sClientMockRecorder) WaitForCRDEstablished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCRDEstablished", reflect.TypeOf((*MockExtendedK8sClient)(nil).WaitForCRDEstablished), arg0, arg1)
}
