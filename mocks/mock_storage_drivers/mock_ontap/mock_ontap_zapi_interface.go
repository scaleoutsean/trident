// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/storage_drivers/ontap/api (interfaces: ZapiClientInterface)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	api "github.com/netapp/trident/storage_drivers/ontap/api"
	azgo "github.com/netapp/trident/storage_drivers/ontap/api/azgo"
)

// MockZapiClientInterface is a mock of ZapiClientInterface interface.
type MockZapiClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockZapiClientInterfaceMockRecorder
}

// MockZapiClientInterfaceMockRecorder is the mock recorder for MockZapiClientInterface.
type MockZapiClientInterfaceMockRecorder struct {
	mock *MockZapiClientInterface
}

// NewMockZapiClientInterface creates a new mock instance.
func NewMockZapiClientInterface(ctrl *gomock.Controller) *MockZapiClientInterface {
	mock := &MockZapiClientInterface{ctrl: ctrl}
	mock.recorder = &MockZapiClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZapiClientInterface) EXPECT() *MockZapiClientInterfaceMockRecorder {
	return m.recorder
}

// AggrSpaceGetIterRequest mocks base method.
func (m *MockZapiClientInterface) AggrSpaceGetIterRequest(arg0 string) (*azgo.AggrSpaceGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggrSpaceGetIterRequest", arg0)
	ret0, _ := ret[0].(*azgo.AggrSpaceGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggrSpaceGetIterRequest indicates an expected call of AggrSpaceGetIterRequest.
func (mr *MockZapiClientInterfaceMockRecorder) AggrSpaceGetIterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggrSpaceGetIterRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).AggrSpaceGetIterRequest), arg0)
}

// AggregateCommitment mocks base method.
func (m *MockZapiClientInterface) AggregateCommitment(arg0 context.Context, arg1 string) (*api.AggregateCommitment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateCommitment", arg0, arg1)
	ret0, _ := ret[0].(*api.AggregateCommitment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateCommitment indicates an expected call of AggregateCommitment.
func (mr *MockZapiClientInterfaceMockRecorder) AggregateCommitment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateCommitment", reflect.TypeOf((*MockZapiClientInterface)(nil).AggregateCommitment), arg0, arg1)
}

// ClientConfig mocks base method.
func (m *MockZapiClientInterface) ClientConfig() api.ClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientConfig")
	ret0, _ := ret[0].(api.ClientConfig)
	return ret0
}

// ClientConfig indicates an expected call of ClientConfig.
func (mr *MockZapiClientInterfaceMockRecorder) ClientConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientConfig", reflect.TypeOf((*MockZapiClientInterface)(nil).ClientConfig))
}

// EmsAutosupportLog mocks base method.
func (m *MockZapiClientInterface) EmsAutosupportLog(arg0 string, arg1 bool, arg2, arg3, arg4 string, arg5 int, arg6 string, arg7 int) (*azgo.EmsAutosupportLogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmsAutosupportLog", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(*azgo.EmsAutosupportLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmsAutosupportLog indicates an expected call of EmsAutosupportLog.
func (mr *MockZapiClientInterfaceMockRecorder) EmsAutosupportLog(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmsAutosupportLog", reflect.TypeOf((*MockZapiClientInterface)(nil).EmsAutosupportLog), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ExportPolicyCreate mocks base method.
func (m *MockZapiClientInterface) ExportPolicyCreate(arg0 string) (*azgo.ExportPolicyCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyCreate", arg0)
	ret0, _ := ret[0].(*azgo.ExportPolicyCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyCreate indicates an expected call of ExportPolicyCreate.
func (mr *MockZapiClientInterfaceMockRecorder) ExportPolicyCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).ExportPolicyCreate), arg0)
}

// ExportPolicyDestroy mocks base method.
func (m *MockZapiClientInterface) ExportPolicyDestroy(arg0 string) (*azgo.ExportPolicyDestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyDestroy", arg0)
	ret0, _ := ret[0].(*azgo.ExportPolicyDestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyDestroy indicates an expected call of ExportPolicyDestroy.
func (mr *MockZapiClientInterfaceMockRecorder) ExportPolicyDestroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyDestroy", reflect.TypeOf((*MockZapiClientInterface)(nil).ExportPolicyDestroy), arg0)
}

// ExportPolicyGet mocks base method.
func (m *MockZapiClientInterface) ExportPolicyGet(arg0 string) (*azgo.ExportPolicyGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyGet", arg0)
	ret0, _ := ret[0].(*azgo.ExportPolicyGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyGet indicates an expected call of ExportPolicyGet.
func (mr *MockZapiClientInterfaceMockRecorder) ExportPolicyGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyGet", reflect.TypeOf((*MockZapiClientInterface)(nil).ExportPolicyGet), arg0)
}

// ExportRuleCreate mocks base method.
func (m *MockZapiClientInterface) ExportRuleCreate(arg0, arg1 string, arg2, arg3, arg4, arg5 []string) (*azgo.ExportRuleCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleCreate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*azgo.ExportRuleCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleCreate indicates an expected call of ExportRuleCreate.
func (mr *MockZapiClientInterfaceMockRecorder) ExportRuleCreate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).ExportRuleCreate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ExportRuleDestroy mocks base method.
func (m *MockZapiClientInterface) ExportRuleDestroy(arg0 string, arg1 int) (*azgo.ExportRuleDestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleDestroy", arg0, arg1)
	ret0, _ := ret[0].(*azgo.ExportRuleDestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleDestroy indicates an expected call of ExportRuleDestroy.
func (mr *MockZapiClientInterfaceMockRecorder) ExportRuleDestroy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleDestroy", reflect.TypeOf((*MockZapiClientInterface)(nil).ExportRuleDestroy), arg0, arg1)
}

// ExportRuleGetIterRequest mocks base method.
func (m *MockZapiClientInterface) ExportRuleGetIterRequest(arg0 string) (*azgo.ExportRuleGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleGetIterRequest", arg0)
	ret0, _ := ret[0].(*azgo.ExportRuleGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleGetIterRequest indicates an expected call of ExportRuleGetIterRequest.
func (mr *MockZapiClientInterfaceMockRecorder) ExportRuleGetIterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleGetIterRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).ExportRuleGetIterRequest), arg0)
}

// FlexGroupCreate mocks base method.
func (m *MockZapiClientInterface) FlexGroupCreate(arg0 context.Context, arg1 string, arg2 int, arg3 []string, arg4, arg5, arg6, arg7, arg8, arg9, arg10 string, arg11 api.QosPolicyGroup, arg12 *bool, arg13 int) (*azgo.VolumeCreateAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
	ret0, _ := ret[0].(*azgo.VolumeCreateAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupCreate indicates an expected call of FlexGroupCreate.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
}

// FlexGroupDestroy mocks base method.
func (m *MockZapiClientInterface) FlexGroupDestroy(arg0 context.Context, arg1 string, arg2 bool) (*azgo.VolumeDestroyAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupDestroy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.VolumeDestroyAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupDestroy indicates an expected call of FlexGroupDestroy.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupDestroy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupDestroy", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupDestroy), arg0, arg1, arg2)
}

// FlexGroupExists mocks base method.
func (m *MockZapiClientInterface) FlexGroupExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupExists indicates an expected call of FlexGroupExists.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupExists", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupExists), arg0, arg1)
}

// FlexGroupGet mocks base method.
func (m *MockZapiClientInterface) FlexGroupGet(arg0 string) (*azgo.VolumeAttributesType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupGet", arg0)
	ret0, _ := ret[0].(*azgo.VolumeAttributesType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupGet indicates an expected call of FlexGroupGet.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupGet", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupGet), arg0)
}

// FlexGroupGetAll mocks base method.
func (m *MockZapiClientInterface) FlexGroupGetAll(arg0 string) (*azgo.VolumeGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupGetAll", arg0)
	ret0, _ := ret[0].(*azgo.VolumeGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupGetAll indicates an expected call of FlexGroupGetAll.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupGetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupGetAll", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupGetAll), arg0)
}

// FlexGroupModifyUnixPermissions mocks base method.
func (m *MockZapiClientInterface) FlexGroupModifyUnixPermissions(arg0 context.Context, arg1, arg2 string) (*azgo.VolumeModifyIterAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupModifyUnixPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.VolumeModifyIterAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupModifyUnixPermissions indicates an expected call of FlexGroupModifyUnixPermissions.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupModifyUnixPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupModifyUnixPermissions", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupModifyUnixPermissions), arg0, arg1, arg2)
}

// FlexGroupSetComment mocks base method.
func (m *MockZapiClientInterface) FlexGroupSetComment(arg0 context.Context, arg1, arg2 string) (*azgo.VolumeModifyIterAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.VolumeModifyIterAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupSetComment indicates an expected call of FlexGroupSetComment.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupSetComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSetComment", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupSetComment), arg0, arg1, arg2)
}

// FlexGroupSetSize mocks base method.
func (m *MockZapiClientInterface) FlexGroupSetSize(arg0 context.Context, arg1, arg2 string) (*azgo.VolumeSizeAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSetSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.VolumeSizeAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupSetSize indicates an expected call of FlexGroupSetSize.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupSetSize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSetSize", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupSetSize), arg0, arg1, arg2)
}

// FlexGroupSize mocks base method.
func (m *MockZapiClientInterface) FlexGroupSize(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSize", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupSize indicates an expected call of FlexGroupSize.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSize", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupSize), arg0)
}

// FlexGroupUsedSize mocks base method.
func (m *MockZapiClientInterface) FlexGroupUsedSize(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupUsedSize", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupUsedSize indicates an expected call of FlexGroupUsedSize.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupUsedSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupUsedSize", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupUsedSize), arg0)
}

// FlexGroupVolumeDisableSnapshotDirectoryAccess mocks base method.
func (m *MockZapiClientInterface) FlexGroupVolumeDisableSnapshotDirectoryAccess(arg0 context.Context, arg1 string) (*azgo.VolumeModifyIterAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupVolumeDisableSnapshotDirectoryAccess", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeModifyIterAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupVolumeDisableSnapshotDirectoryAccess indicates an expected call of FlexGroupVolumeDisableSnapshotDirectoryAccess.
func (mr *MockZapiClientInterfaceMockRecorder) FlexGroupVolumeDisableSnapshotDirectoryAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupVolumeDisableSnapshotDirectoryAccess", reflect.TypeOf((*MockZapiClientInterface)(nil).FlexGroupVolumeDisableSnapshotDirectoryAccess), arg0, arg1)
}

// GetClonedZapiRunner mocks base method.
func (m *MockZapiClientInterface) GetClonedZapiRunner() *azgo.ZapiRunner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClonedZapiRunner")
	ret0, _ := ret[0].(*azgo.ZapiRunner)
	return ret0
}

// GetClonedZapiRunner indicates an expected call of GetClonedZapiRunner.
func (mr *MockZapiClientInterfaceMockRecorder) GetClonedZapiRunner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClonedZapiRunner", reflect.TypeOf((*MockZapiClientInterface)(nil).GetClonedZapiRunner))
}

// GetNontunneledZapiRunner mocks base method.
func (m *MockZapiClientInterface) GetNontunneledZapiRunner() *azgo.ZapiRunner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNontunneledZapiRunner")
	ret0, _ := ret[0].(*azgo.ZapiRunner)
	return ret0
}

// GetNontunneledZapiRunner indicates an expected call of GetNontunneledZapiRunner.
func (mr *MockZapiClientInterfaceMockRecorder) GetNontunneledZapiRunner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNontunneledZapiRunner", reflect.TypeOf((*MockZapiClientInterface)(nil).GetNontunneledZapiRunner))
}

// GetPeeredVservers mocks base method.
func (m *MockZapiClientInterface) GetPeeredVservers(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeeredVservers", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeeredVservers indicates an expected call of GetPeeredVservers.
func (mr *MockZapiClientInterfaceMockRecorder) GetPeeredVservers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeeredVservers", reflect.TypeOf((*MockZapiClientInterface)(nil).GetPeeredVservers), arg0)
}

// IgroupAdd mocks base method.
func (m *MockZapiClientInterface) IgroupAdd(arg0, arg1 string) (*azgo.IgroupAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupAdd", arg0, arg1)
	ret0, _ := ret[0].(*azgo.IgroupAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupAdd indicates an expected call of IgroupAdd.
func (mr *MockZapiClientInterfaceMockRecorder) IgroupAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupAdd", reflect.TypeOf((*MockZapiClientInterface)(nil).IgroupAdd), arg0, arg1)
}

// IgroupCreate mocks base method.
func (m *MockZapiClientInterface) IgroupCreate(arg0, arg1, arg2 string) (*azgo.IgroupCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.IgroupCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupCreate indicates an expected call of IgroupCreate.
func (mr *MockZapiClientInterfaceMockRecorder) IgroupCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).IgroupCreate), arg0, arg1, arg2)
}

// IgroupDestroy mocks base method.
func (m *MockZapiClientInterface) IgroupDestroy(arg0 string) (*azgo.IgroupDestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupDestroy", arg0)
	ret0, _ := ret[0].(*azgo.IgroupDestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupDestroy indicates an expected call of IgroupDestroy.
func (mr *MockZapiClientInterfaceMockRecorder) IgroupDestroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupDestroy", reflect.TypeOf((*MockZapiClientInterface)(nil).IgroupDestroy), arg0)
}

// IgroupGet mocks base method.
func (m *MockZapiClientInterface) IgroupGet(arg0 string) (*azgo.InitiatorGroupInfoType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupGet", arg0)
	ret0, _ := ret[0].(*azgo.InitiatorGroupInfoType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupGet indicates an expected call of IgroupGet.
func (mr *MockZapiClientInterfaceMockRecorder) IgroupGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupGet", reflect.TypeOf((*MockZapiClientInterface)(nil).IgroupGet), arg0)
}

// IgroupList mocks base method.
func (m *MockZapiClientInterface) IgroupList() (*azgo.IgroupGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupList")
	ret0, _ := ret[0].(*azgo.IgroupGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupList indicates an expected call of IgroupList.
func (mr *MockZapiClientInterfaceMockRecorder) IgroupList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupList", reflect.TypeOf((*MockZapiClientInterface)(nil).IgroupList))
}

// IgroupRemove mocks base method.
func (m *MockZapiClientInterface) IgroupRemove(arg0, arg1 string, arg2 bool) (*azgo.IgroupRemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupRemove", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.IgroupRemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupRemove indicates an expected call of IgroupRemove.
func (mr *MockZapiClientInterfaceMockRecorder) IgroupRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupRemove", reflect.TypeOf((*MockZapiClientInterface)(nil).IgroupRemove), arg0, arg1, arg2)
}

// IsVserverDRCapable mocks base method.
func (m *MockZapiClientInterface) IsVserverDRCapable(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVserverDRCapable", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVserverDRCapable indicates an expected call of IsVserverDRCapable.
func (mr *MockZapiClientInterfaceMockRecorder) IsVserverDRCapable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVserverDRCapable", reflect.TypeOf((*MockZapiClientInterface)(nil).IsVserverDRCapable), arg0)
}

// IsVserverDRDestination mocks base method.
func (m *MockZapiClientInterface) IsVserverDRDestination(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVserverDRDestination", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVserverDRDestination indicates an expected call of IsVserverDRDestination.
func (mr *MockZapiClientInterfaceMockRecorder) IsVserverDRDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVserverDRDestination", reflect.TypeOf((*MockZapiClientInterface)(nil).IsVserverDRDestination), arg0)
}

// IsVserverDRSource mocks base method.
func (m *MockZapiClientInterface) IsVserverDRSource(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVserverDRSource", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVserverDRSource indicates an expected call of IsVserverDRSource.
func (mr *MockZapiClientInterfaceMockRecorder) IsVserverDRSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVserverDRSource", reflect.TypeOf((*MockZapiClientInterface)(nil).IsVserverDRSource), arg0)
}

// IscsiInitiatorAddAuth mocks base method.
func (m *MockZapiClientInterface) IscsiInitiatorAddAuth(arg0, arg1, arg2, arg3, arg4, arg5 string) (*azgo.IscsiInitiatorAddAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorAddAuth", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*azgo.IscsiInitiatorAddAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorAddAuth indicates an expected call of IscsiInitiatorAddAuth.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInitiatorAddAuth(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorAddAuth", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInitiatorAddAuth), arg0, arg1, arg2, arg3, arg4, arg5)
}

// IscsiInitiatorAuthGetIter mocks base method.
func (m *MockZapiClientInterface) IscsiInitiatorAuthGetIter() ([]azgo.IscsiSecurityEntryInfoType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorAuthGetIter")
	ret0, _ := ret[0].([]azgo.IscsiSecurityEntryInfoType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorAuthGetIter indicates an expected call of IscsiInitiatorAuthGetIter.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInitiatorAuthGetIter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorAuthGetIter", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInitiatorAuthGetIter))
}

// IscsiInitiatorDeleteAuth mocks base method.
func (m *MockZapiClientInterface) IscsiInitiatorDeleteAuth(arg0 string) (*azgo.IscsiInitiatorDeleteAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorDeleteAuth", arg0)
	ret0, _ := ret[0].(*azgo.IscsiInitiatorDeleteAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorDeleteAuth indicates an expected call of IscsiInitiatorDeleteAuth.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInitiatorDeleteAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorDeleteAuth", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInitiatorDeleteAuth), arg0)
}

// IscsiInitiatorGetAuth mocks base method.
func (m *MockZapiClientInterface) IscsiInitiatorGetAuth(arg0 string) (*azgo.IscsiInitiatorGetAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorGetAuth", arg0)
	ret0, _ := ret[0].(*azgo.IscsiInitiatorGetAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorGetAuth indicates an expected call of IscsiInitiatorGetAuth.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInitiatorGetAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorGetAuth", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInitiatorGetAuth), arg0)
}

// IscsiInitiatorGetDefaultAuth mocks base method.
func (m *MockZapiClientInterface) IscsiInitiatorGetDefaultAuth() (*azgo.IscsiInitiatorGetDefaultAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorGetDefaultAuth")
	ret0, _ := ret[0].(*azgo.IscsiInitiatorGetDefaultAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorGetDefaultAuth indicates an expected call of IscsiInitiatorGetDefaultAuth.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInitiatorGetDefaultAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorGetDefaultAuth", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInitiatorGetDefaultAuth))
}

// IscsiInitiatorGetIter mocks base method.
func (m *MockZapiClientInterface) IscsiInitiatorGetIter() ([]azgo.IscsiInitiatorListEntryInfoType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorGetIter")
	ret0, _ := ret[0].([]azgo.IscsiInitiatorListEntryInfoType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorGetIter indicates an expected call of IscsiInitiatorGetIter.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInitiatorGetIter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorGetIter", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInitiatorGetIter))
}

// IscsiInitiatorModifyCHAPParams mocks base method.
func (m *MockZapiClientInterface) IscsiInitiatorModifyCHAPParams(arg0, arg1, arg2, arg3, arg4 string) (*azgo.IscsiInitiatorModifyChapParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorModifyCHAPParams", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*azgo.IscsiInitiatorModifyChapParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorModifyCHAPParams indicates an expected call of IscsiInitiatorModifyCHAPParams.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInitiatorModifyCHAPParams(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorModifyCHAPParams", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInitiatorModifyCHAPParams), arg0, arg1, arg2, arg3, arg4)
}

// IscsiInitiatorSetDefaultAuth mocks base method.
func (m *MockZapiClientInterface) IscsiInitiatorSetDefaultAuth(arg0, arg1, arg2, arg3, arg4 string) (*azgo.IscsiInitiatorSetDefaultAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorSetDefaultAuth", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*azgo.IscsiInitiatorSetDefaultAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorSetDefaultAuth indicates an expected call of IscsiInitiatorSetDefaultAuth.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInitiatorSetDefaultAuth(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorSetDefaultAuth", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInitiatorSetDefaultAuth), arg0, arg1, arg2, arg3, arg4)
}

// IscsiInterfaceGetIterRequest mocks base method.
func (m *MockZapiClientInterface) IscsiInterfaceGetIterRequest() (*azgo.IscsiInterfaceGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInterfaceGetIterRequest")
	ret0, _ := ret[0].(*azgo.IscsiInterfaceGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInterfaceGetIterRequest indicates an expected call of IscsiInterfaceGetIterRequest.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiInterfaceGetIterRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInterfaceGetIterRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiInterfaceGetIterRequest))
}

// IscsiNodeGetNameRequest mocks base method.
func (m *MockZapiClientInterface) IscsiNodeGetNameRequest() (*azgo.IscsiNodeGetNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiNodeGetNameRequest")
	ret0, _ := ret[0].(*azgo.IscsiNodeGetNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiNodeGetNameRequest indicates an expected call of IscsiNodeGetNameRequest.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiNodeGetNameRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiNodeGetNameRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiNodeGetNameRequest))
}

// IscsiServiceGetIterRequest mocks base method.
func (m *MockZapiClientInterface) IscsiServiceGetIterRequest() (*azgo.IscsiServiceGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiServiceGetIterRequest")
	ret0, _ := ret[0].(*azgo.IscsiServiceGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiServiceGetIterRequest indicates an expected call of IscsiServiceGetIterRequest.
func (mr *MockZapiClientInterfaceMockRecorder) IscsiServiceGetIterRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiServiceGetIterRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).IscsiServiceGetIterRequest))
}

// JobGetIterStatus mocks base method.
func (m *MockZapiClientInterface) JobGetIterStatus(arg0 int) (*azgo.JobGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobGetIterStatus", arg0)
	ret0, _ := ret[0].(*azgo.JobGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobGetIterStatus indicates an expected call of JobGetIterStatus.
func (mr *MockZapiClientInterfaceMockRecorder) JobGetIterStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobGetIterStatus", reflect.TypeOf((*MockZapiClientInterface)(nil).JobGetIterStatus), arg0)
}

// JobScheduleExists mocks base method.
func (m *MockZapiClientInterface) JobScheduleExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobScheduleExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobScheduleExists indicates an expected call of JobScheduleExists.
func (mr *MockZapiClientInterfaceMockRecorder) JobScheduleExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobScheduleExists", reflect.TypeOf((*MockZapiClientInterface)(nil).JobScheduleExists), arg0, arg1)
}

// LunCloneCreate mocks base method.
func (m *MockZapiClientInterface) LunCloneCreate(arg0, arg1, arg2 string, arg3 api.QosPolicyGroup) (*azgo.CloneCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCloneCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*azgo.CloneCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunCloneCreate indicates an expected call of LunCloneCreate.
func (mr *MockZapiClientInterfaceMockRecorder) LunCloneCreate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCloneCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).LunCloneCreate), arg0, arg1, arg2, arg3)
}

// LunCount mocks base method.
func (m *MockZapiClientInterface) LunCount(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunCount indicates an expected call of LunCount.
func (mr *MockZapiClientInterfaceMockRecorder) LunCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCount", reflect.TypeOf((*MockZapiClientInterface)(nil).LunCount), arg0, arg1)
}

// LunCreate mocks base method.
func (m *MockZapiClientInterface) LunCreate(arg0 string, arg1 int, arg2 string, arg3 api.QosPolicyGroup, arg4, arg5 bool) (*azgo.LunCreateBySizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCreate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*azgo.LunCreateBySizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunCreate indicates an expected call of LunCreate.
func (mr *MockZapiClientInterfaceMockRecorder) LunCreate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).LunCreate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// LunDestroy mocks base method.
func (m *MockZapiClientInterface) LunDestroy(arg0 string) (*azgo.LunDestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunDestroy", arg0)
	ret0, _ := ret[0].(*azgo.LunDestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunDestroy indicates an expected call of LunDestroy.
func (mr *MockZapiClientInterfaceMockRecorder) LunDestroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunDestroy", reflect.TypeOf((*MockZapiClientInterface)(nil).LunDestroy), arg0)
}

// LunGet mocks base method.
func (m *MockZapiClientInterface) LunGet(arg0 string) (*azgo.LunInfoType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGet", arg0)
	ret0, _ := ret[0].(*azgo.LunInfoType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGet indicates an expected call of LunGet.
func (mr *MockZapiClientInterfaceMockRecorder) LunGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGet", reflect.TypeOf((*MockZapiClientInterface)(nil).LunGet), arg0)
}

// LunGetAll mocks base method.
func (m *MockZapiClientInterface) LunGetAll(arg0 string) (*azgo.LunGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetAll", arg0)
	ret0, _ := ret[0].(*azgo.LunGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetAll indicates an expected call of LunGetAll.
func (mr *MockZapiClientInterfaceMockRecorder) LunGetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetAll", reflect.TypeOf((*MockZapiClientInterface)(nil).LunGetAll), arg0)
}

// LunGetAllForVolume mocks base method.
func (m *MockZapiClientInterface) LunGetAllForVolume(arg0 string) (*azgo.LunGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetAllForVolume", arg0)
	ret0, _ := ret[0].(*azgo.LunGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetAllForVolume indicates an expected call of LunGetAllForVolume.
func (mr *MockZapiClientInterfaceMockRecorder) LunGetAllForVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetAllForVolume", reflect.TypeOf((*MockZapiClientInterface)(nil).LunGetAllForVolume), arg0)
}

// LunGetAllForVserver mocks base method.
func (m *MockZapiClientInterface) LunGetAllForVserver(arg0 string) (*azgo.LunGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetAllForVserver", arg0)
	ret0, _ := ret[0].(*azgo.LunGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetAllForVserver indicates an expected call of LunGetAllForVserver.
func (mr *MockZapiClientInterfaceMockRecorder) LunGetAllForVserver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetAllForVserver", reflect.TypeOf((*MockZapiClientInterface)(nil).LunGetAllForVserver), arg0)
}

// LunGetAttribute mocks base method.
func (m *MockZapiClientInterface) LunGetAttribute(arg0, arg1 string) (*azgo.LunGetAttributeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetAttribute", arg0, arg1)
	ret0, _ := ret[0].(*azgo.LunGetAttributeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetAttribute indicates an expected call of LunGetAttribute.
func (mr *MockZapiClientInterfaceMockRecorder) LunGetAttribute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetAttribute", reflect.TypeOf((*MockZapiClientInterface)(nil).LunGetAttribute), arg0, arg1)
}

// LunGetGeometry mocks base method.
func (m *MockZapiClientInterface) LunGetGeometry(arg0 string) (*azgo.LunGetGeometryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetGeometry", arg0)
	ret0, _ := ret[0].(*azgo.LunGetGeometryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetGeometry indicates an expected call of LunGetGeometry.
func (mr *MockZapiClientInterfaceMockRecorder) LunGetGeometry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetGeometry", reflect.TypeOf((*MockZapiClientInterface)(nil).LunGetGeometry), arg0)
}

// LunGetSerialNumber mocks base method.
func (m *MockZapiClientInterface) LunGetSerialNumber(arg0 string) (*azgo.LunGetSerialNumberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetSerialNumber", arg0)
	ret0, _ := ret[0].(*azgo.LunGetSerialNumberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetSerialNumber indicates an expected call of LunGetSerialNumber.
func (mr *MockZapiClientInterfaceMockRecorder) LunGetSerialNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetSerialNumber", reflect.TypeOf((*MockZapiClientInterface)(nil).LunGetSerialNumber), arg0)
}

// LunMap mocks base method.
func (m *MockZapiClientInterface) LunMap(arg0, arg1 string, arg2 int) (*azgo.LunMapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMap", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.LunMapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMap indicates an expected call of LunMap.
func (mr *MockZapiClientInterfaceMockRecorder) LunMap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMap", reflect.TypeOf((*MockZapiClientInterface)(nil).LunMap), arg0, arg1, arg2)
}

// LunMapAutoID mocks base method.
func (m *MockZapiClientInterface) LunMapAutoID(arg0, arg1 string) (*azgo.LunMapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapAutoID", arg0, arg1)
	ret0, _ := ret[0].(*azgo.LunMapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapAutoID indicates an expected call of LunMapAutoID.
func (mr *MockZapiClientInterfaceMockRecorder) LunMapAutoID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapAutoID", reflect.TypeOf((*MockZapiClientInterface)(nil).LunMapAutoID), arg0, arg1)
}

// LunMapGet mocks base method.
func (m *MockZapiClientInterface) LunMapGet(arg0, arg1 string) (*azgo.LunMapGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapGet", arg0, arg1)
	ret0, _ := ret[0].(*azgo.LunMapGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapGet indicates an expected call of LunMapGet.
func (mr *MockZapiClientInterfaceMockRecorder) LunMapGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapGet", reflect.TypeOf((*MockZapiClientInterface)(nil).LunMapGet), arg0, arg1)
}

// LunMapIfNotMapped mocks base method.
func (m *MockZapiClientInterface) LunMapIfNotMapped(arg0 context.Context, arg1, arg2 string, arg3 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapIfNotMapped", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapIfNotMapped indicates an expected call of LunMapIfNotMapped.
func (mr *MockZapiClientInterfaceMockRecorder) LunMapIfNotMapped(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapIfNotMapped", reflect.TypeOf((*MockZapiClientInterface)(nil).LunMapIfNotMapped), arg0, arg1, arg2, arg3)
}

// LunMapListInfo mocks base method.
func (m *MockZapiClientInterface) LunMapListInfo(arg0 string) (*azgo.LunMapListInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapListInfo", arg0)
	ret0, _ := ret[0].(*azgo.LunMapListInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapListInfo indicates an expected call of LunMapListInfo.
func (mr *MockZapiClientInterfaceMockRecorder) LunMapListInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapListInfo", reflect.TypeOf((*MockZapiClientInterface)(nil).LunMapListInfo), arg0)
}

// LunMapsGetByIgroup mocks base method.
func (m *MockZapiClientInterface) LunMapsGetByIgroup(arg0 string) (*azgo.LunMapGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapsGetByIgroup", arg0)
	ret0, _ := ret[0].(*azgo.LunMapGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapsGetByIgroup indicates an expected call of LunMapsGetByIgroup.
func (mr *MockZapiClientInterfaceMockRecorder) LunMapsGetByIgroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapsGetByIgroup", reflect.TypeOf((*MockZapiClientInterface)(nil).LunMapsGetByIgroup), arg0)
}

// LunMapsGetByLun mocks base method.
func (m *MockZapiClientInterface) LunMapsGetByLun(arg0 string) (*azgo.LunMapGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapsGetByLun", arg0)
	ret0, _ := ret[0].(*azgo.LunMapGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapsGetByLun indicates an expected call of LunMapsGetByLun.
func (mr *MockZapiClientInterfaceMockRecorder) LunMapsGetByLun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapsGetByLun", reflect.TypeOf((*MockZapiClientInterface)(nil).LunMapsGetByLun), arg0)
}

// LunOffline mocks base method.
func (m *MockZapiClientInterface) LunOffline(arg0 string) (*azgo.LunOfflineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunOffline", arg0)
	ret0, _ := ret[0].(*azgo.LunOfflineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunOffline indicates an expected call of LunOffline.
func (mr *MockZapiClientInterfaceMockRecorder) LunOffline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunOffline", reflect.TypeOf((*MockZapiClientInterface)(nil).LunOffline), arg0)
}

// LunOnline mocks base method.
func (m *MockZapiClientInterface) LunOnline(arg0 string) (*azgo.LunOnlineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunOnline", arg0)
	ret0, _ := ret[0].(*azgo.LunOnlineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunOnline indicates an expected call of LunOnline.
func (mr *MockZapiClientInterfaceMockRecorder) LunOnline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunOnline", reflect.TypeOf((*MockZapiClientInterface)(nil).LunOnline), arg0)
}

// LunRename mocks base method.
func (m *MockZapiClientInterface) LunRename(arg0, arg1 string) (*azgo.LunMoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunRename", arg0, arg1)
	ret0, _ := ret[0].(*azgo.LunMoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunRename indicates an expected call of LunRename.
func (mr *MockZapiClientInterfaceMockRecorder) LunRename(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunRename", reflect.TypeOf((*MockZapiClientInterface)(nil).LunRename), arg0, arg1)
}

// LunResize mocks base method.
func (m *MockZapiClientInterface) LunResize(arg0 string, arg1 int) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunResize", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunResize indicates an expected call of LunResize.
func (mr *MockZapiClientInterfaceMockRecorder) LunResize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunResize", reflect.TypeOf((*MockZapiClientInterface)(nil).LunResize), arg0, arg1)
}

// LunSetAttribute mocks base method.
func (m *MockZapiClientInterface) LunSetAttribute(arg0, arg1, arg2 string) (*azgo.LunSetAttributeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetAttribute", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.LunSetAttributeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSetAttribute indicates an expected call of LunSetAttribute.
func (mr *MockZapiClientInterfaceMockRecorder) LunSetAttribute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetAttribute", reflect.TypeOf((*MockZapiClientInterface)(nil).LunSetAttribute), arg0, arg1, arg2)
}

// LunSetQosPolicyGroup mocks base method.
func (m *MockZapiClientInterface) LunSetQosPolicyGroup(arg0 string, arg1 api.QosPolicyGroup) (*azgo.LunSetQosPolicyGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetQosPolicyGroup", arg0, arg1)
	ret0, _ := ret[0].(*azgo.LunSetQosPolicyGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSetQosPolicyGroup indicates an expected call of LunSetQosPolicyGroup.
func (mr *MockZapiClientInterfaceMockRecorder) LunSetQosPolicyGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetQosPolicyGroup", reflect.TypeOf((*MockZapiClientInterface)(nil).LunSetQosPolicyGroup), arg0, arg1)
}

// LunSize mocks base method.
func (m *MockZapiClientInterface) LunSize(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSize", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSize indicates an expected call of LunSize.
func (mr *MockZapiClientInterfaceMockRecorder) LunSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSize", reflect.TypeOf((*MockZapiClientInterface)(nil).LunSize), arg0)
}

// LunUnmap mocks base method.
func (m *MockZapiClientInterface) LunUnmap(arg0, arg1 string) (*azgo.LunUnmapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunUnmap", arg0, arg1)
	ret0, _ := ret[0].(*azgo.LunUnmapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunUnmap indicates an expected call of LunUnmap.
func (mr *MockZapiClientInterfaceMockRecorder) LunUnmap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunUnmap", reflect.TypeOf((*MockZapiClientInterface)(nil).LunUnmap), arg0, arg1)
}

// NetInterfaceGet mocks base method.
func (m *MockZapiClientInterface) NetInterfaceGet() (*azgo.NetInterfaceGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetInterfaceGet")
	ret0, _ := ret[0].(*azgo.NetInterfaceGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetInterfaceGet indicates an expected call of NetInterfaceGet.
func (mr *MockZapiClientInterfaceMockRecorder) NetInterfaceGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetInterfaceGet", reflect.TypeOf((*MockZapiClientInterface)(nil).NetInterfaceGet))
}

// NetInterfaceGetDataLIFs mocks base method.
func (m *MockZapiClientInterface) NetInterfaceGetDataLIFs(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetInterfaceGetDataLIFs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetInterfaceGetDataLIFs indicates an expected call of NetInterfaceGetDataLIFs.
func (mr *MockZapiClientInterfaceMockRecorder) NetInterfaceGetDataLIFs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetInterfaceGetDataLIFs", reflect.TypeOf((*MockZapiClientInterface)(nil).NetInterfaceGetDataLIFs), arg0, arg1)
}

// NodeListSerialNumbers mocks base method.
func (m *MockZapiClientInterface) NodeListSerialNumbers(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeListSerialNumbers", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeListSerialNumbers indicates an expected call of NodeListSerialNumbers.
func (mr *MockZapiClientInterfaceMockRecorder) NodeListSerialNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeListSerialNumbers", reflect.TypeOf((*MockZapiClientInterface)(nil).NodeListSerialNumbers), arg0)
}

// QtreeCount mocks base method.
func (m *MockZapiClientInterface) QtreeCount(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeCount indicates an expected call of QtreeCount.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCount", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeCount), arg0, arg1)
}

// QtreeCreate mocks base method.
func (m *MockZapiClientInterface) QtreeCreate(arg0, arg1, arg2, arg3, arg4, arg5 string) (*azgo.QtreeCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCreate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*azgo.QtreeCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeCreate indicates an expected call of QtreeCreate.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeCreate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeCreate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// QtreeDestroyAsync mocks base method.
func (m *MockZapiClientInterface) QtreeDestroyAsync(arg0 string, arg1 bool) (*azgo.QtreeDeleteAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeDestroyAsync", arg0, arg1)
	ret0, _ := ret[0].(*azgo.QtreeDeleteAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeDestroyAsync indicates an expected call of QtreeDestroyAsync.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeDestroyAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeDestroyAsync", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeDestroyAsync), arg0, arg1)
}

// QtreeExists mocks base method.
func (m *MockZapiClientInterface) QtreeExists(arg0 context.Context, arg1, arg2 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QtreeExists indicates an expected call of QtreeExists.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeExists", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeExists), arg0, arg1, arg2)
}

// QtreeGet mocks base method.
func (m *MockZapiClientInterface) QtreeGet(arg0, arg1 string) (*azgo.QtreeInfoType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGet", arg0, arg1)
	ret0, _ := ret[0].(*azgo.QtreeInfoType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGet indicates an expected call of QtreeGet.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGet", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeGet), arg0, arg1)
}

// QtreeGetAll mocks base method.
func (m *MockZapiClientInterface) QtreeGetAll(arg0 string) (*azgo.QtreeListIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetAll", arg0)
	ret0, _ := ret[0].(*azgo.QtreeListIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetAll indicates an expected call of QtreeGetAll.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeGetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetAll", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeGetAll), arg0)
}

// QtreeList mocks base method.
func (m *MockZapiClientInterface) QtreeList(arg0, arg1 string) (*azgo.QtreeListIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeList", arg0, arg1)
	ret0, _ := ret[0].(*azgo.QtreeListIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeList indicates an expected call of QtreeList.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeList", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeList), arg0, arg1)
}

// QtreeModifyExportPolicy mocks base method.
func (m *MockZapiClientInterface) QtreeModifyExportPolicy(arg0, arg1, arg2 string) (*azgo.QtreeModifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeModifyExportPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.QtreeModifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeModifyExportPolicy indicates an expected call of QtreeModifyExportPolicy.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeModifyExportPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeModifyExportPolicy", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeModifyExportPolicy), arg0, arg1, arg2)
}

// QtreeRename mocks base method.
func (m *MockZapiClientInterface) QtreeRename(arg0, arg1 string) (*azgo.QtreeRenameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeRename", arg0, arg1)
	ret0, _ := ret[0].(*azgo.QtreeRenameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeRename indicates an expected call of QtreeRename.
func (mr *MockZapiClientInterfaceMockRecorder) QtreeRename(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeRename", reflect.TypeOf((*MockZapiClientInterface)(nil).QtreeRename), arg0, arg1)
}

// QuotaEntryList mocks base method.
func (m *MockZapiClientInterface) QuotaEntryList(arg0 string) (*azgo.QuotaListEntriesIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaEntryList", arg0)
	ret0, _ := ret[0].(*azgo.QuotaListEntriesIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaEntryList indicates an expected call of QuotaEntryList.
func (mr *MockZapiClientInterfaceMockRecorder) QuotaEntryList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaEntryList", reflect.TypeOf((*MockZapiClientInterface)(nil).QuotaEntryList), arg0)
}

// QuotaGetEntry mocks base method.
func (m *MockZapiClientInterface) QuotaGetEntry(arg0, arg1 string) (*azgo.QuotaEntryType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaGetEntry", arg0, arg1)
	ret0, _ := ret[0].(*azgo.QuotaEntryType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaGetEntry indicates an expected call of QuotaGetEntry.
func (mr *MockZapiClientInterfaceMockRecorder) QuotaGetEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaGetEntry", reflect.TypeOf((*MockZapiClientInterface)(nil).QuotaGetEntry), arg0, arg1)
}

// QuotaOff mocks base method.
func (m *MockZapiClientInterface) QuotaOff(arg0 string) (*azgo.QuotaOffResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOff", arg0)
	ret0, _ := ret[0].(*azgo.QuotaOffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaOff indicates an expected call of QuotaOff.
func (mr *MockZapiClientInterfaceMockRecorder) QuotaOff(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOff", reflect.TypeOf((*MockZapiClientInterface)(nil).QuotaOff), arg0)
}

// QuotaOn mocks base method.
func (m *MockZapiClientInterface) QuotaOn(arg0 string) (*azgo.QuotaOnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOn", arg0)
	ret0, _ := ret[0].(*azgo.QuotaOnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaOn indicates an expected call of QuotaOn.
func (mr *MockZapiClientInterfaceMockRecorder) QuotaOn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOn", reflect.TypeOf((*MockZapiClientInterface)(nil).QuotaOn), arg0)
}

// QuotaResize mocks base method.
func (m *MockZapiClientInterface) QuotaResize(arg0 string) (*azgo.QuotaResizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaResize", arg0)
	ret0, _ := ret[0].(*azgo.QuotaResizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaResize indicates an expected call of QuotaResize.
func (mr *MockZapiClientInterfaceMockRecorder) QuotaResize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaResize", reflect.TypeOf((*MockZapiClientInterface)(nil).QuotaResize), arg0)
}

// QuotaSetEntry mocks base method.
func (m *MockZapiClientInterface) QuotaSetEntry(arg0, arg1, arg2, arg3, arg4 string) (*azgo.QuotaSetEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaSetEntry", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*azgo.QuotaSetEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaSetEntry indicates an expected call of QuotaSetEntry.
func (mr *MockZapiClientInterfaceMockRecorder) QuotaSetEntry(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaSetEntry", reflect.TypeOf((*MockZapiClientInterface)(nil).QuotaSetEntry), arg0, arg1, arg2, arg3, arg4)
}

// QuotaStatus mocks base method.
func (m *MockZapiClientInterface) QuotaStatus(arg0 string) (*azgo.QuotaStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaStatus", arg0)
	ret0, _ := ret[0].(*azgo.QuotaStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaStatus indicates an expected call of QuotaStatus.
func (mr *MockZapiClientInterfaceMockRecorder) QuotaStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaStatus", reflect.TypeOf((*MockZapiClientInterface)(nil).QuotaStatus), arg0)
}

// SVMGetAggregateNames mocks base method.
func (m *MockZapiClientInterface) SVMGetAggregateNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMGetAggregateNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SVMGetAggregateNames indicates an expected call of SVMGetAggregateNames.
func (mr *MockZapiClientInterfaceMockRecorder) SVMGetAggregateNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMGetAggregateNames", reflect.TypeOf((*MockZapiClientInterface)(nil).SVMGetAggregateNames))
}

// SVMMCC mocks base method.
func (m *MockZapiClientInterface) SVMMCC() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMMCC")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SVMMCC indicates an expected call of SVMMCC.
func (mr *MockZapiClientInterfaceMockRecorder) SVMMCC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMMCC", reflect.TypeOf((*MockZapiClientInterface)(nil).SVMMCC))
}

// SVMName mocks base method.
func (m *MockZapiClientInterface) SVMName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SVMName indicates an expected call of SVMName.
func (mr *MockZapiClientInterfaceMockRecorder) SVMName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMName", reflect.TypeOf((*MockZapiClientInterface)(nil).SVMName))
}

// SVMUUID mocks base method.
func (m *MockZapiClientInterface) SVMUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SVMUUID indicates an expected call of SVMUUID.
func (mr *MockZapiClientInterfaceMockRecorder) SVMUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMUUID", reflect.TypeOf((*MockZapiClientInterface)(nil).SVMUUID))
}

// SetSVMMCC mocks base method.
func (m *MockZapiClientInterface) SetSVMMCC(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSVMMCC", arg0)
}

// SetSVMMCC indicates an expected call of SetSVMMCC.
func (mr *MockZapiClientInterfaceMockRecorder) SetSVMMCC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSVMMCC", reflect.TypeOf((*MockZapiClientInterface)(nil).SetSVMMCC), arg0)
}

// SetSVMUUID mocks base method.
func (m *MockZapiClientInterface) SetSVMUUID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSVMUUID", arg0)
}

// SetSVMUUID indicates an expected call of SetSVMUUID.
func (mr *MockZapiClientInterfaceMockRecorder) SetSVMUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSVMUUID", reflect.TypeOf((*MockZapiClientInterface)(nil).SetSVMUUID), arg0)
}

// SnapmirrorAbort mocks base method.
func (m *MockZapiClientInterface) SnapmirrorAbort(arg0, arg1, arg2, arg3 string) (*azgo.SnapmirrorAbortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorAbort", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*azgo.SnapmirrorAbortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorAbort indicates an expected call of SnapmirrorAbort.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorAbort(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorAbort", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorAbort), arg0, arg1, arg2, arg3)
}

// SnapmirrorBreak mocks base method.
func (m *MockZapiClientInterface) SnapmirrorBreak(arg0, arg1, arg2, arg3, arg4 string) (*azgo.SnapmirrorBreakResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorBreak", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*azgo.SnapmirrorBreakResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorBreak indicates an expected call of SnapmirrorBreak.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorBreak(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorBreak", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorBreak), arg0, arg1, arg2, arg3, arg4)
}

// SnapmirrorCreate mocks base method.
func (m *MockZapiClientInterface) SnapmirrorCreate(arg0, arg1, arg2, arg3, arg4, arg5 string) (*azgo.SnapmirrorCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorCreate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*azgo.SnapmirrorCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorCreate indicates an expected call of SnapmirrorCreate.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorCreate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorCreate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SnapmirrorDelete mocks base method.
func (m *MockZapiClientInterface) SnapmirrorDelete(arg0, arg1, arg2, arg3 string) (*azgo.SnapmirrorDestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorDelete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*azgo.SnapmirrorDestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorDelete indicates an expected call of SnapmirrorDelete.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorDelete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorDelete", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorDelete), arg0, arg1, arg2, arg3)
}

// SnapmirrorDeleteViaDestination mocks base method.
func (m *MockZapiClientInterface) SnapmirrorDeleteViaDestination(arg0, arg1 string) (*azgo.SnapmirrorDestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorDeleteViaDestination", arg0, arg1)
	ret0, _ := ret[0].(*azgo.SnapmirrorDestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorDeleteViaDestination indicates an expected call of SnapmirrorDeleteViaDestination.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorDeleteViaDestination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorDeleteViaDestination", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorDeleteViaDestination), arg0, arg1)
}

// SnapmirrorGet mocks base method.
func (m *MockZapiClientInterface) SnapmirrorGet(arg0, arg1, arg2, arg3 string) (*azgo.SnapmirrorGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorGet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*azgo.SnapmirrorGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorGet indicates an expected call of SnapmirrorGet.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorGet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorGet", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorGet), arg0, arg1, arg2, arg3)
}

// SnapmirrorGetDestinationIterRequest mocks base method.
func (m *MockZapiClientInterface) SnapmirrorGetDestinationIterRequest(arg0 string) (*azgo.SnapmirrorGetDestinationIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorGetDestinationIterRequest", arg0)
	ret0, _ := ret[0].(*azgo.SnapmirrorGetDestinationIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorGetDestinationIterRequest indicates an expected call of SnapmirrorGetDestinationIterRequest.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorGetDestinationIterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorGetDestinationIterRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorGetDestinationIterRequest), arg0)
}

// SnapmirrorGetIterRequest mocks base method.
func (m *MockZapiClientInterface) SnapmirrorGetIterRequest(arg0 string) (*azgo.SnapmirrorGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorGetIterRequest", arg0)
	ret0, _ := ret[0].(*azgo.SnapmirrorGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorGetIterRequest indicates an expected call of SnapmirrorGetIterRequest.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorGetIterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorGetIterRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorGetIterRequest), arg0)
}

// SnapmirrorInitialize mocks base method.
func (m *MockZapiClientInterface) SnapmirrorInitialize(arg0, arg1, arg2, arg3 string) (*azgo.SnapmirrorInitializeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorInitialize", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*azgo.SnapmirrorInitializeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorInitialize indicates an expected call of SnapmirrorInitialize.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorInitialize(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorInitialize", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorInitialize), arg0, arg1, arg2, arg3)
}

// SnapmirrorPolicyExists mocks base method.
func (m *MockZapiClientInterface) SnapmirrorPolicyExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorPolicyExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorPolicyExists indicates an expected call of SnapmirrorPolicyExists.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorPolicyExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorPolicyExists", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorPolicyExists), arg0, arg1)
}

// SnapmirrorPolicyGet mocks base method.
func (m *MockZapiClientInterface) SnapmirrorPolicyGet(arg0 context.Context, arg1 string) (*azgo.SnapmirrorPolicyInfoType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorPolicyGet", arg0, arg1)
	ret0, _ := ret[0].(*azgo.SnapmirrorPolicyInfoType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorPolicyGet indicates an expected call of SnapmirrorPolicyGet.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorPolicyGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorPolicyGet", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorPolicyGet), arg0, arg1)
}

// SnapmirrorQuiesce mocks base method.
func (m *MockZapiClientInterface) SnapmirrorQuiesce(arg0, arg1, arg2, arg3 string) (*azgo.SnapmirrorQuiesceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorQuiesce", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*azgo.SnapmirrorQuiesceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorQuiesce indicates an expected call of SnapmirrorQuiesce.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorQuiesce(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorQuiesce", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorQuiesce), arg0, arg1, arg2, arg3)
}

// SnapmirrorRelease mocks base method.
func (m *MockZapiClientInterface) SnapmirrorRelease(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorRelease", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorRelease indicates an expected call of SnapmirrorRelease.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorRelease(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorRelease", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorRelease), arg0, arg1)
}

// SnapmirrorResync mocks base method.
func (m *MockZapiClientInterface) SnapmirrorResync(arg0, arg1, arg2, arg3 string) (*azgo.SnapmirrorResyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorResync", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*azgo.SnapmirrorResyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorResync indicates an expected call of SnapmirrorResync.
func (mr *MockZapiClientInterfaceMockRecorder) SnapmirrorResync(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorResync", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapmirrorResync), arg0, arg1, arg2, arg3)
}

// SnapshotCreate mocks base method.
func (m *MockZapiClientInterface) SnapshotCreate(arg0, arg1 string) (*azgo.SnapshotCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotCreate", arg0, arg1)
	ret0, _ := ret[0].(*azgo.SnapshotCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotCreate indicates an expected call of SnapshotCreate.
func (mr *MockZapiClientInterfaceMockRecorder) SnapshotCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapshotCreate), arg0, arg1)
}

// SnapshotDelete mocks base method.
func (m *MockZapiClientInterface) SnapshotDelete(arg0, arg1 string) (*azgo.SnapshotDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotDelete", arg0, arg1)
	ret0, _ := ret[0].(*azgo.SnapshotDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotDelete indicates an expected call of SnapshotDelete.
func (mr *MockZapiClientInterfaceMockRecorder) SnapshotDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotDelete", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapshotDelete), arg0, arg1)
}

// SnapshotList mocks base method.
func (m *MockZapiClientInterface) SnapshotList(arg0 string) (*azgo.SnapshotGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotList", arg0)
	ret0, _ := ret[0].(*azgo.SnapshotGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotList indicates an expected call of SnapshotList.
func (mr *MockZapiClientInterfaceMockRecorder) SnapshotList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotList", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapshotList), arg0)
}

// SnapshotRestoreVolume mocks base method.
func (m *MockZapiClientInterface) SnapshotRestoreVolume(arg0, arg1 string) (*azgo.SnapshotRestoreVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreVolume", arg0, arg1)
	ret0, _ := ret[0].(*azgo.SnapshotRestoreVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotRestoreVolume indicates an expected call of SnapshotRestoreVolume.
func (mr *MockZapiClientInterfaceMockRecorder) SnapshotRestoreVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreVolume", reflect.TypeOf((*MockZapiClientInterface)(nil).SnapshotRestoreVolume), arg0, arg1)
}

// SupportsFeature mocks base method.
func (m *MockZapiClientInterface) SupportsFeature(arg0 context.Context, arg1 api.Feature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsFeature", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsFeature indicates an expected call of SupportsFeature.
func (mr *MockZapiClientInterfaceMockRecorder) SupportsFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsFeature", reflect.TypeOf((*MockZapiClientInterface)(nil).SupportsFeature), arg0, arg1)
}

// SystemGetOntapiVersion mocks base method.
func (m *MockZapiClientInterface) SystemGetOntapiVersion(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetOntapiVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemGetOntapiVersion indicates an expected call of SystemGetOntapiVersion.
func (mr *MockZapiClientInterfaceMockRecorder) SystemGetOntapiVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetOntapiVersion", reflect.TypeOf((*MockZapiClientInterface)(nil).SystemGetOntapiVersion), arg0)
}

// SystemGetVersion mocks base method.
func (m *MockZapiClientInterface) SystemGetVersion() (*azgo.SystemGetVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetVersion")
	ret0, _ := ret[0].(*azgo.SystemGetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemGetVersion indicates an expected call of SystemGetVersion.
func (mr *MockZapiClientInterfaceMockRecorder) SystemGetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetVersion", reflect.TypeOf((*MockZapiClientInterface)(nil).SystemGetVersion))
}

// TieringPolicyValue mocks base method.
func (m *MockZapiClientInterface) TieringPolicyValue(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TieringPolicyValue", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TieringPolicyValue indicates an expected call of TieringPolicyValue.
func (mr *MockZapiClientInterfaceMockRecorder) TieringPolicyValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TieringPolicyValue", reflect.TypeOf((*MockZapiClientInterface)(nil).TieringPolicyValue), arg0)
}

// VolumeCloneCreate mocks base method.
func (m *MockZapiClientInterface) VolumeCloneCreate(arg0, arg1, arg2 string) (*azgo.VolumeCloneCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.VolumeCloneCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCloneCreate indicates an expected call of VolumeCloneCreate.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeCloneCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeCloneCreate), arg0, arg1, arg2)
}

// VolumeCloneCreateAsync mocks base method.
func (m *MockZapiClientInterface) VolumeCloneCreateAsync(arg0, arg1, arg2 string) (*azgo.VolumeCloneCreateAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneCreateAsync", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.VolumeCloneCreateAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCloneCreateAsync indicates an expected call of VolumeCloneCreateAsync.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeCloneCreateAsync(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneCreateAsync", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeCloneCreateAsync), arg0, arg1, arg2)
}

// VolumeCloneSplitStart mocks base method.
func (m *MockZapiClientInterface) VolumeCloneSplitStart(arg0 string) (*azgo.VolumeCloneSplitStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneSplitStart", arg0)
	ret0, _ := ret[0].(*azgo.VolumeCloneSplitStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCloneSplitStart indicates an expected call of VolumeCloneSplitStart.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeCloneSplitStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneSplitStart", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeCloneSplitStart), arg0)
}

// VolumeCreate mocks base method.
func (m *MockZapiClientInterface) VolumeCreate(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 string, arg11 api.QosPolicyGroup, arg12 *bool, arg13 int, arg14 bool) (*azgo.VolumeCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
	ret0, _ := ret[0].(*azgo.VolumeCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCreate indicates an expected call of VolumeCreate.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
}

// VolumeDestroy mocks base method.
func (m *MockZapiClientInterface) VolumeDestroy(arg0 string, arg1 bool) (*azgo.VolumeDestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDestroy", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeDestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeDestroy indicates an expected call of VolumeDestroy.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeDestroy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDestroy", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeDestroy), arg0, arg1)
}

// VolumeDisableSnapshotDirectoryAccess mocks base method.
func (m *MockZapiClientInterface) VolumeDisableSnapshotDirectoryAccess(arg0 string) (*azgo.VolumeModifyIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDisableSnapshotDirectoryAccess", arg0)
	ret0, _ := ret[0].(*azgo.VolumeModifyIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeDisableSnapshotDirectoryAccess indicates an expected call of VolumeDisableSnapshotDirectoryAccess.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeDisableSnapshotDirectoryAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDisableSnapshotDirectoryAccess", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeDisableSnapshotDirectoryAccess), arg0)
}

// VolumeExists mocks base method.
func (m *MockZapiClientInterface) VolumeExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeExists indicates an expected call of VolumeExists.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExists", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeExists), arg0, arg1)
}

// VolumeGet mocks base method.
func (m *MockZapiClientInterface) VolumeGet(arg0 string) (*azgo.VolumeAttributesType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeGet", arg0)
	ret0, _ := ret[0].(*azgo.VolumeAttributesType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeGet indicates an expected call of VolumeGet.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeGet", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeGet), arg0)
}

// VolumeGetAll mocks base method.
func (m *MockZapiClientInterface) VolumeGetAll(arg0 string) (*azgo.VolumeGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeGetAll", arg0)
	ret0, _ := ret[0].(*azgo.VolumeGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeGetAll indicates an expected call of VolumeGetAll.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeGetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeGetAll", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeGetAll), arg0)
}

// VolumeGetType mocks base method.
func (m *MockZapiClientInterface) VolumeGetType(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeGetType", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeGetType indicates an expected call of VolumeGetType.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeGetType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeGetType", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeGetType), arg0)
}

// VolumeList mocks base method.
func (m *MockZapiClientInterface) VolumeList(arg0 string) (*azgo.VolumeGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeList", arg0)
	ret0, _ := ret[0].(*azgo.VolumeGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeList indicates an expected call of VolumeList.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeList", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeList), arg0)
}

// VolumeListAllBackedBySnapshot mocks base method.
func (m *MockZapiClientInterface) VolumeListAllBackedBySnapshot(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListAllBackedBySnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListAllBackedBySnapshot indicates an expected call of VolumeListAllBackedBySnapshot.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeListAllBackedBySnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListAllBackedBySnapshot", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeListAllBackedBySnapshot), arg0, arg1, arg2)
}

// VolumeListByAttrs mocks base method.
func (m *MockZapiClientInterface) VolumeListByAttrs(arg0, arg1, arg2, arg3, arg4 string, arg5 bool, arg6 *bool, arg7 int) (*azgo.VolumeGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListByAttrs", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(*azgo.VolumeGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListByAttrs indicates an expected call of VolumeListByAttrs.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeListByAttrs(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListByAttrs", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeListByAttrs), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// VolumeModifyExportPolicy mocks base method.
func (m *MockZapiClientInterface) VolumeModifyExportPolicy(arg0, arg1 string) (*azgo.VolumeModifyIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyExportPolicy", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeModifyIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeModifyExportPolicy indicates an expected call of VolumeModifyExportPolicy.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeModifyExportPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyExportPolicy", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeModifyExportPolicy), arg0, arg1)
}

// VolumeModifyUnixPermissions mocks base method.
func (m *MockZapiClientInterface) VolumeModifyUnixPermissions(arg0, arg1 string) (*azgo.VolumeModifyIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyUnixPermissions", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeModifyIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeModifyUnixPermissions indicates an expected call of VolumeModifyUnixPermissions.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeModifyUnixPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyUnixPermissions", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeModifyUnixPermissions), arg0, arg1)
}

// VolumeMount mocks base method.
func (m *MockZapiClientInterface) VolumeMount(arg0, arg1 string) (*azgo.VolumeMountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeMount", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeMountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeMount indicates an expected call of VolumeMount.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeMount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeMount", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeMount), arg0, arg1)
}

// VolumeOffline mocks base method.
func (m *MockZapiClientInterface) VolumeOffline(arg0 string) (*azgo.VolumeOfflineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeOffline", arg0)
	ret0, _ := ret[0].(*azgo.VolumeOfflineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeOffline indicates an expected call of VolumeOffline.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeOffline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeOffline", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeOffline), arg0)
}

// VolumeRename mocks base method.
func (m *MockZapiClientInterface) VolumeRename(arg0, arg1 string) (*azgo.VolumeRenameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRename", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeRenameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeRename indicates an expected call of VolumeRename.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeRename(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRename", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeRename), arg0, arg1)
}

// VolumeSetComment mocks base method.
func (m *MockZapiClientInterface) VolumeSetComment(arg0 context.Context, arg1, arg2 string) (*azgo.VolumeModifyIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*azgo.VolumeModifyIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSetComment indicates an expected call of VolumeSetComment.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeSetComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetComment", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeSetComment), arg0, arg1, arg2)
}

// VolumeSetQosPolicyGroupName mocks base method.
func (m *MockZapiClientInterface) VolumeSetQosPolicyGroupName(arg0 string, arg1 api.QosPolicyGroup) (*azgo.VolumeModifyIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetQosPolicyGroupName", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeModifyIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSetQosPolicyGroupName indicates an expected call of VolumeSetQosPolicyGroupName.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeSetQosPolicyGroupName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetQosPolicyGroupName", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeSetQosPolicyGroupName), arg0, arg1)
}

// VolumeSetSize mocks base method.
func (m *MockZapiClientInterface) VolumeSetSize(arg0, arg1 string) (*azgo.VolumeSizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetSize", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSetSize indicates an expected call of VolumeSetSize.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeSetSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetSize", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeSetSize), arg0, arg1)
}

// VolumeSize mocks base method.
func (m *MockZapiClientInterface) VolumeSize(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSize", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSize indicates an expected call of VolumeSize.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSize", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeSize), arg0)
}

// VolumeUnmount mocks base method.
func (m *MockZapiClientInterface) VolumeUnmount(arg0 string, arg1 bool) (*azgo.VolumeUnmountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeUnmount", arg0, arg1)
	ret0, _ := ret[0].(*azgo.VolumeUnmountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUnmount indicates an expected call of VolumeUnmount.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeUnmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUnmount", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeUnmount), arg0, arg1)
}

// VolumeUsedSize mocks base method.
func (m *MockZapiClientInterface) VolumeUsedSize(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeUsedSize", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUsedSize indicates an expected call of VolumeUsedSize.
func (mr *MockZapiClientInterfaceMockRecorder) VolumeUsedSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUsedSize", reflect.TypeOf((*MockZapiClientInterface)(nil).VolumeUsedSize), arg0)
}

// VserverGetIterAdminRequest mocks base method.
func (m *MockZapiClientInterface) VserverGetIterAdminRequest() (*azgo.VserverGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VserverGetIterAdminRequest")
	ret0, _ := ret[0].(*azgo.VserverGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VserverGetIterAdminRequest indicates an expected call of VserverGetIterAdminRequest.
func (mr *MockZapiClientInterfaceMockRecorder) VserverGetIterAdminRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VserverGetIterAdminRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).VserverGetIterAdminRequest))
}

// VserverGetIterRequest mocks base method.
func (m *MockZapiClientInterface) VserverGetIterRequest() (*azgo.VserverGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VserverGetIterRequest")
	ret0, _ := ret[0].(*azgo.VserverGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VserverGetIterRequest indicates an expected call of VserverGetIterRequest.
func (mr *MockZapiClientInterfaceMockRecorder) VserverGetIterRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VserverGetIterRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).VserverGetIterRequest))
}

// VserverGetRequest mocks base method.
func (m *MockZapiClientInterface) VserverGetRequest() (*azgo.VserverGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VserverGetRequest")
	ret0, _ := ret[0].(*azgo.VserverGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VserverGetRequest indicates an expected call of VserverGetRequest.
func (mr *MockZapiClientInterfaceMockRecorder) VserverGetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VserverGetRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).VserverGetRequest))
}

// VserverShowAggrGetIterRequest mocks base method.
func (m *MockZapiClientInterface) VserverShowAggrGetIterRequest() (*azgo.VserverShowAggrGetIterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VserverShowAggrGetIterRequest")
	ret0, _ := ret[0].(*azgo.VserverShowAggrGetIterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VserverShowAggrGetIterRequest indicates an expected call of VserverShowAggrGetIterRequest.
func (mr *MockZapiClientInterfaceMockRecorder) VserverShowAggrGetIterRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VserverShowAggrGetIterRequest", reflect.TypeOf((*MockZapiClientInterface)(nil).VserverShowAggrGetIterRequest))
}

// WaitForAsyncResponse mocks base method.
func (m *MockZapiClientInterface) WaitForAsyncResponse(arg0 context.Context, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForAsyncResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForAsyncResponse indicates an expected call of WaitForAsyncResponse.
func (mr *MockZapiClientInterfaceMockRecorder) WaitForAsyncResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForAsyncResponse", reflect.TypeOf((*MockZapiClientInterface)(nil).WaitForAsyncResponse), arg0, arg1, arg2)
}
