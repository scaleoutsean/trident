// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/storage_drivers/gcp/api (interfaces: GCPClient)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	api "github.com/netapp/trident/storage_drivers/gcp/api"
	utils "github.com/netapp/trident/utils"
)

// MockGCPClient is a mock of GCPClient interface.
type MockGCPClient struct {
	ctrl     *gomock.Controller
	recorder *MockGCPClientMockRecorder
}

// MockGCPClientMockRecorder is the mock recorder for MockGCPClient.
type MockGCPClientMockRecorder struct {
	mock *MockGCPClient
}

// NewMockGCPClient creates a new mock instance.
func NewMockGCPClient(ctrl *gomock.Controller) *MockGCPClient {
	mock := &MockGCPClient{ctrl: ctrl}
	mock.recorder = &MockGCPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCPClient) EXPECT() *MockGCPClientMockRecorder {
	return m.recorder
}

// ChangeVolumeUnixPermissions mocks base method.
func (m *MockGCPClient) ChangeVolumeUnixPermissions(arg0 context.Context, arg1 *api.Volume, arg2 string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeVolumeUnixPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeVolumeUnixPermissions indicates an expected call of ChangeVolumeUnixPermissions.
func (mr *MockGCPClientMockRecorder) ChangeVolumeUnixPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeVolumeUnixPermissions", reflect.TypeOf((*MockGCPClient)(nil).ChangeVolumeUnixPermissions), arg0, arg1, arg2)
}

// CreateBackup mocks base method.
func (m *MockGCPClient) CreateBackup(arg0 context.Context, arg1 *api.BackupCreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockGCPClientMockRecorder) CreateBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockGCPClient)(nil).CreateBackup), arg0, arg1)
}

// CreateSnapshot mocks base method.
func (m *MockGCPClient) CreateSnapshot(arg0 context.Context, arg1 *api.SnapshotCreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockGCPClientMockRecorder) CreateSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockGCPClient)(nil).CreateSnapshot), arg0, arg1)
}

// CreateVolume mocks base method.
func (m *MockGCPClient) CreateVolume(arg0 context.Context, arg1 *api.VolumeCreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockGCPClientMockRecorder) CreateVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockGCPClient)(nil).CreateVolume), arg0, arg1)
}

// DeleteBackup mocks base method.
func (m *MockGCPClient) DeleteBackup(arg0 context.Context, arg1 *api.Volume, arg2 *api.Backup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockGCPClientMockRecorder) DeleteBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockGCPClient)(nil).DeleteBackup), arg0, arg1, arg2)
}

// DeleteSnapshot mocks base method.
func (m *MockGCPClient) DeleteSnapshot(arg0 context.Context, arg1 *api.Volume, arg2 *api.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockGCPClientMockRecorder) DeleteSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockGCPClient)(nil).DeleteSnapshot), arg0, arg1, arg2)
}

// DeleteVolume mocks base method.
func (m *MockGCPClient) DeleteVolume(arg0 context.Context, arg1 *api.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockGCPClientMockRecorder) DeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockGCPClient)(nil).DeleteVolume), arg0, arg1)
}

// GetBackupByID mocks base method.
func (m *MockGCPClient) GetBackupByID(arg0 context.Context, arg1 string) (*api.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupByID", arg0, arg1)
	ret0, _ := ret[0].(*api.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupByID indicates an expected call of GetBackupByID.
func (mr *MockGCPClientMockRecorder) GetBackupByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupByID", reflect.TypeOf((*MockGCPClient)(nil).GetBackupByID), arg0, arg1)
}

// GetBackupForVolume mocks base method.
func (m *MockGCPClient) GetBackupForVolume(arg0 context.Context, arg1 *api.Volume, arg2 string) (*api.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupForVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupForVolume indicates an expected call of GetBackupForVolume.
func (mr *MockGCPClientMockRecorder) GetBackupForVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupForVolume", reflect.TypeOf((*MockGCPClient)(nil).GetBackupForVolume), arg0, arg1, arg2)
}

// GetBackupsForVolume mocks base method.
func (m *MockGCPClient) GetBackupsForVolume(arg0 context.Context, arg1 *api.Volume) (*[]api.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupsForVolume", arg0, arg1)
	ret0, _ := ret[0].(*[]api.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupsForVolume indicates an expected call of GetBackupsForVolume.
func (mr *MockGCPClientMockRecorder) GetBackupsForVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupsForVolume", reflect.TypeOf((*MockGCPClient)(nil).GetBackupsForVolume), arg0, arg1)
}

// GetPools mocks base method.
func (m *MockGCPClient) GetPools(arg0 context.Context) (*[]*api.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPools", arg0)
	ret0, _ := ret[0].(*[]*api.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPools indicates an expected call of GetPools.
func (mr *MockGCPClientMockRecorder) GetPools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPools", reflect.TypeOf((*MockGCPClient)(nil).GetPools), arg0)
}

// GetServiceLevels mocks base method.
func (m *MockGCPClient) GetServiceLevels(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceLevels", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceLevels indicates an expected call of GetServiceLevels.
func (mr *MockGCPClientMockRecorder) GetServiceLevels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceLevels", reflect.TypeOf((*MockGCPClient)(nil).GetServiceLevels), arg0)
}

// GetSnapshotByID mocks base method.
func (m *MockGCPClient) GetSnapshotByID(arg0 context.Context, arg1 string) (*api.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotByID", arg0, arg1)
	ret0, _ := ret[0].(*api.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotByID indicates an expected call of GetSnapshotByID.
func (mr *MockGCPClientMockRecorder) GetSnapshotByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotByID", reflect.TypeOf((*MockGCPClient)(nil).GetSnapshotByID), arg0, arg1)
}

// GetSnapshotForVolume mocks base method.
func (m *MockGCPClient) GetSnapshotForVolume(arg0 context.Context, arg1 *api.Volume, arg2 string) (*api.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotForVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotForVolume indicates an expected call of GetSnapshotForVolume.
func (mr *MockGCPClientMockRecorder) GetSnapshotForVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotForVolume", reflect.TypeOf((*MockGCPClient)(nil).GetSnapshotForVolume), arg0, arg1, arg2)
}

// GetSnapshotsForVolume mocks base method.
func (m *MockGCPClient) GetSnapshotsForVolume(arg0 context.Context, arg1 *api.Volume) (*[]api.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotsForVolume", arg0, arg1)
	ret0, _ := ret[0].(*[]api.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotsForVolume indicates an expected call of GetSnapshotsForVolume.
func (mr *MockGCPClientMockRecorder) GetSnapshotsForVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotsForVolume", reflect.TypeOf((*MockGCPClient)(nil).GetSnapshotsForVolume), arg0, arg1)
}

// GetVersion mocks base method.
func (m *MockGCPClient) GetVersion(arg0 context.Context) (*utils.Version, *utils.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0)
	ret0, _ := ret[0].(*utils.Version)
	ret1, _ := ret[1].(*utils.Version)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockGCPClientMockRecorder) GetVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockGCPClient)(nil).GetVersion), arg0)
}

// GetVolumeByCreationToken mocks base method.
func (m *MockGCPClient) GetVolumeByCreationToken(arg0 context.Context, arg1 string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByCreationToken", arg0, arg1)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByCreationToken indicates an expected call of GetVolumeByCreationToken.
func (mr *MockGCPClientMockRecorder) GetVolumeByCreationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByCreationToken", reflect.TypeOf((*MockGCPClient)(nil).GetVolumeByCreationToken), arg0, arg1)
}

// GetVolumeByID mocks base method.
func (m *MockGCPClient) GetVolumeByID(arg0 context.Context, arg1 string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByID", arg0, arg1)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByID indicates an expected call of GetVolumeByID.
func (mr *MockGCPClientMockRecorder) GetVolumeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByID", reflect.TypeOf((*MockGCPClient)(nil).GetVolumeByID), arg0, arg1)
}

// GetVolumeByName mocks base method.
func (m *MockGCPClient) GetVolumeByName(arg0 context.Context, arg1 string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByName", arg0, arg1)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByName indicates an expected call of GetVolumeByName.
func (mr *MockGCPClientMockRecorder) GetVolumeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByName", reflect.TypeOf((*MockGCPClient)(nil).GetVolumeByName), arg0, arg1)
}

// GetVolumes mocks base method.
func (m *MockGCPClient) GetVolumes(arg0 context.Context) (*[]api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumes", arg0)
	ret0, _ := ret[0].(*[]api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumes indicates an expected call of GetVolumes.
func (mr *MockGCPClientMockRecorder) GetVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumes", reflect.TypeOf((*MockGCPClient)(nil).GetVolumes), arg0)
}

// InvokeAPI mocks base method.
func (m *MockGCPClient) InvokeAPI(arg0 context.Context, arg1 []byte, arg2, arg3 string) (*http.Response, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeAPI", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InvokeAPI indicates an expected call of InvokeAPI.
func (mr *MockGCPClientMockRecorder) InvokeAPI(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeAPI", reflect.TypeOf((*MockGCPClient)(nil).InvokeAPI), arg0, arg1, arg2, arg3)
}

// RelabelVolume mocks base method.
func (m *MockGCPClient) RelabelVolume(arg0 context.Context, arg1 *api.Volume, arg2 []string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelabelVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelabelVolume indicates an expected call of RelabelVolume.
func (mr *MockGCPClientMockRecorder) RelabelVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelabelVolume", reflect.TypeOf((*MockGCPClient)(nil).RelabelVolume), arg0, arg1, arg2)
}

// RenameRelabelVolume mocks base method.
func (m *MockGCPClient) RenameRelabelVolume(arg0 context.Context, arg1 *api.Volume, arg2 string, arg3 []string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameRelabelVolume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameRelabelVolume indicates an expected call of RenameRelabelVolume.
func (mr *MockGCPClientMockRecorder) RenameRelabelVolume(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameRelabelVolume", reflect.TypeOf((*MockGCPClient)(nil).RenameRelabelVolume), arg0, arg1, arg2, arg3)
}

// RenameVolume mocks base method.
func (m *MockGCPClient) RenameVolume(arg0 context.Context, arg1 *api.Volume, arg2 string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameVolume indicates an expected call of RenameVolume.
func (mr *MockGCPClientMockRecorder) RenameVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameVolume", reflect.TypeOf((*MockGCPClient)(nil).RenameVolume), arg0, arg1, arg2)
}

// ResizeVolume mocks base method.
func (m *MockGCPClient) ResizeVolume(arg0 context.Context, arg1 *api.Volume, arg2 int64) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeVolume indicates an expected call of ResizeVolume.
func (mr *MockGCPClientMockRecorder) ResizeVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeVolume", reflect.TypeOf((*MockGCPClient)(nil).ResizeVolume), arg0, arg1, arg2)
}

// RestoreSnapshot mocks base method.
func (m *MockGCPClient) RestoreSnapshot(arg0 context.Context, arg1 *api.Volume, arg2 *api.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreSnapshot indicates an expected call of RestoreSnapshot.
func (mr *MockGCPClientMockRecorder) RestoreSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshot", reflect.TypeOf((*MockGCPClient)(nil).RestoreSnapshot), arg0, arg1, arg2)
}

// VolumeExistsByCreationToken mocks base method.
func (m *MockGCPClient) VolumeExistsByCreationToken(arg0 context.Context, arg1 string) (bool, *api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExistsByCreationToken", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.Volume)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VolumeExistsByCreationToken indicates an expected call of VolumeExistsByCreationToken.
func (mr *MockGCPClientMockRecorder) VolumeExistsByCreationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExistsByCreationToken", reflect.TypeOf((*MockGCPClient)(nil).VolumeExistsByCreationToken), arg0, arg1)
}

// WaitForBackupStates mocks base method.
func (m *MockGCPClient) WaitForBackupStates(arg0 context.Context, arg1 *api.Backup, arg2, arg3 []string, arg4 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForBackupStates", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForBackupStates indicates an expected call of WaitForBackupStates.
func (mr *MockGCPClientMockRecorder) WaitForBackupStates(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForBackupStates", reflect.TypeOf((*MockGCPClient)(nil).WaitForBackupStates), arg0, arg1, arg2, arg3, arg4)
}

// WaitForSnapshotState mocks base method.
func (m *MockGCPClient) WaitForSnapshotState(arg0 context.Context, arg1 *api.Snapshot, arg2 string, arg3 []string, arg4 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForSnapshotState", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForSnapshotState indicates an expected call of WaitForSnapshotState.
func (mr *MockGCPClientMockRecorder) WaitForSnapshotState(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForSnapshotState", reflect.TypeOf((*MockGCPClient)(nil).WaitForSnapshotState), arg0, arg1, arg2, arg3, arg4)
}

// WaitForVolumeStates mocks base method.
func (m *MockGCPClient) WaitForVolumeStates(arg0 context.Context, arg1 *api.Volume, arg2, arg3 []string, arg4 time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForVolumeStates", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForVolumeStates indicates an expected call of WaitForVolumeStates.
func (mr *MockGCPClientMockRecorder) WaitForVolumeStates(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForVolumeStates", reflect.TypeOf((*MockGCPClient)(nil).WaitForVolumeStates), arg0, arg1, arg2, arg3, arg4)
}
